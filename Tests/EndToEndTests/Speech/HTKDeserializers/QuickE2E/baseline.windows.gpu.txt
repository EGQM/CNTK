CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 07:04:27
		Last modified date: Wed Jul 13 07:40:26 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by svcphil on cntk-muc01
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
07/14/2016 07:58:40: -------------------------------------------------------------------
07/14/2016 07:58:40: Build info: 

07/14/2016 07:58:40: 		Built time: Jul 14 2016 07:04:27
07/14/2016 07:58:40: 		Last modified date: Wed Jul 13 07:40:26 2016
07/14/2016 07:58:40: 		Build type: Release
07/14/2016 07:58:40: 		Build target: GPU
07/14/2016 07:58:40: 		With 1bit-SGD: no
07/14/2016 07:58:40: 		Math lib: mkl
07/14/2016 07:58:40: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 07:58:40: 		CUB_PATH: c:\src\cub-1.4.1
07/14/2016 07:58:40: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 07:58:40: 		Build Branch: HEAD
07/14/2016 07:58:40: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
07/14/2016 07:58:40: 		Built by svcphil on cntk-muc01
07/14/2016 07:58:40: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 07:58:40: -------------------------------------------------------------------
07/14/2016 07:58:40: -------------------------------------------------------------------
07/14/2016 07:58:40: GPU info:

07/14/2016 07:58:40: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
07/14/2016 07:58:40: -------------------------------------------------------------------

07/14/2016 07:58:40: Running on cntk-muc00 at 2016/07/14 07:58:40
07/14/2016 07:58:40: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true



07/14/2016 07:58:40: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 07:58:40: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

07/14/2016 07:58:40: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 07:58:40: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 07:58:40: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

07/14/2016 07:58:40: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 07:58:40: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
07/14/2016 07:58:40: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 07:58:40: Commands: speechTrain
07/14/2016 07:58:40: Precision = "float"
07/14/2016 07:58:40: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
07/14/2016 07:58:40: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 07:58:40: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 07:58:40: ##############################################################################
07/14/2016 07:58:40: #                                                                            #
07/14/2016 07:58:40: # Action "train"                                                             #
07/14/2016 07:58:40: #                                                                            #
07/14/2016 07:58:40: ##############################################################################

07/14/2016 07:58:40: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 07:58:40: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 07:58:40: Created model with 25 nodes on GPU 0.

07/14/2016 07:58:40: Training criterion node(s):
07/14/2016 07:58:40: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 07:58:40: Evaluation criterion node(s):

07/14/2016 07:58:40: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
000000375B40D8D0: {[features Value[363 x *]] }
0000003766A7B160: {[CrossEntropyWithSoftmax Gradient[1]] }
0000003766A7B480: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0000003766A7B660: {[W2*H1 Gradient[132 x 1 x *]] }
0000003766A7BFC0: {[B2 Gradient[132 x 1]] }
0000003766C8BFD0: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
0000003766C8C1B0: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0000003766C8C250: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
0000003766C8C390: {[W2 Value[132 x 512]] }
0000003766C8C610: {[W0*features Value[512 x *]] }
0000003766C8C7F0: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0000003766C8C890: {[B2 Value[132 x 1]] }
0000003766C8C930: {[B1 Value[512 x 1]] }
0000003766C8CB10: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0000003766C8CBB0: {[W1 Value[512 x 512]] }
0000003766C8CE30: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
0000003766C8D1F0: {[EvalErrorPrediction Value[1]] }
0000003766C8D330: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
0000003766C8D5B0: {[labels Value[132 x *]] }
0000003766C8D790: {[Prior Value[132]] }
0000003766C8D830: {[CrossEntropyWithSoftmax Value[1]] }
0000003766C8DC90: {[LogOfPrior Value[132]] }
0000003766C8DD30: {[MVNormalizedFeatures Value[363 x *]] }
0000003766C8DE70: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
000000376FBFAB00: {[MeanOfFeatures Value[363]] }
000000376FBFB140: {[B0 Value[512 x 1]] }
000000376FBFC0E0: {[W0 Value[512 x 363]] }
000000376FBFC5E0: {[InvStdOfFeatures Value[363]] }


07/14/2016 07:58:40: Precomputing --> 3 PreCompute nodes found.

07/14/2016 07:58:40: 	MeanOfFeatures = Mean()
07/14/2016 07:58:40: 	InvStdOfFeatures = InvStdDev()
07/14/2016 07:58:40: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 07:58:42: Precomputing --> Completed.


07/14/2016 07:58:42: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 07:58:42: Starting minibatch loop.
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.42354774 * 640; EvalErrorPrediction = 0.90468750 * 640; time = 0.0155s; samplesPerSecond = 41410.5
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.39509163 * 640; EvalErrorPrediction = 0.89062500 * 640; time = 0.0140s; samplesPerSecond = 45590.5
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.01229935 * 640; EvalErrorPrediction = 0.87812500 * 640; time = 0.0141s; samplesPerSecond = 45403.0
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.82837677 * 640; EvalErrorPrediction = 0.85625000 * 640; time = 0.0141s; samplesPerSecond = 45428.7
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.74022522 * 640; EvalErrorPrediction = 0.87343750 * 640; time = 0.0140s; samplesPerSecond = 45691.4
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.70657196 * 640; EvalErrorPrediction = 0.85625000 * 640; time = 0.0140s; samplesPerSecond = 45805.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.71125183 * 640; EvalErrorPrediction = 0.85781250 * 640; time = 0.0139s; samplesPerSecond = 46152.7
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.52593689 * 640; EvalErrorPrediction = 0.80156250 * 640; time = 0.0140s; samplesPerSecond = 45802.6
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.37486877 * 640; EvalErrorPrediction = 0.80156250 * 640; time = 0.0140s; samplesPerSecond = 45623.0
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41778870 * 640; EvalErrorPrediction = 0.79843750 * 640; time = 0.0140s; samplesPerSecond = 45769.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.24115906 * 640; EvalErrorPrediction = 0.78125000 * 640; time = 0.0141s; samplesPerSecond = 45496.6
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.12319946 * 640; EvalErrorPrediction = 0.77031250 * 640; time = 0.0140s; samplesPerSecond = 45681.7
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.11529541 * 640; EvalErrorPrediction = 0.74375000 * 640; time = 0.0141s; samplesPerSecond = 45422.3
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 2.97781372 * 640; EvalErrorPrediction = 0.71718750 * 640; time = 0.0141s; samplesPerSecond = 45264.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.00809937 * 640; EvalErrorPrediction = 0.73593750 * 640; time = 0.0141s; samplesPerSecond = 45457.8
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.02300415 * 640; EvalErrorPrediction = 0.75000000 * 640; time = 0.0141s; samplesPerSecond = 45493.3
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.93533936 * 640; EvalErrorPrediction = 0.71093750 * 640; time = 0.0140s; samplesPerSecond = 45688.2
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.78161621 * 640; EvalErrorPrediction = 0.69531250 * 640; time = 0.0139s; samplesPerSecond = 46089.6
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.80377808 * 640; EvalErrorPrediction = 0.68593750 * 640; time = 0.0139s; samplesPerSecond = 46036.5
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.65144653 * 640; EvalErrorPrediction = 0.68125000 * 640; time = 0.0139s; samplesPerSecond = 45914.3
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.60241089 * 640; EvalErrorPrediction = 0.65781250 * 640; time = 0.0140s; samplesPerSecond = 45769.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.67238770 * 640; EvalErrorPrediction = 0.69531250 * 640; time = 0.0141s; samplesPerSecond = 45541.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.50230103 * 640; EvalErrorPrediction = 0.66250000 * 640; time = 0.0140s; samplesPerSecond = 45675.1
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.61235352 * 640; EvalErrorPrediction = 0.67187500 * 640; time = 0.0140s; samplesPerSecond = 45809.2
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.50873413 * 640; EvalErrorPrediction = 0.63281250 * 640; time = 0.0139s; samplesPerSecond = 45934.1
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.35728760 * 640; EvalErrorPrediction = 0.60000000 * 640; time = 0.0141s; samplesPerSecond = 45444.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.32581787 * 640; EvalErrorPrediction = 0.60781250 * 640; time = 0.0140s; samplesPerSecond = 45564.6
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.37927246 * 640; EvalErrorPrediction = 0.61562500 * 640; time = 0.0140s; samplesPerSecond = 45619.8
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.27796021 * 640; EvalErrorPrediction = 0.57968750 * 640; time = 0.0141s; samplesPerSecond = 45444.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.25142822 * 640; EvalErrorPrediction = 0.60312500 * 640; time = 0.0140s; samplesPerSecond = 45835.4
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.23436279 * 640; EvalErrorPrediction = 0.58906250 * 640; time = 0.0141s; samplesPerSecond = 45444.9
07/14/2016 07:58:42:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.28571167 * 640; EvalErrorPrediction = 0.61406250 * 640; time = 0.0141s; samplesPerSecond = 45509.5
07/14/2016 07:58:42: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 3.02521057 * 20480; EvalErrorPrediction = 0.72875977 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=0.452049s
07/14/2016 07:58:42: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.1'

07/14/2016 07:58:42: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

07/14/2016 07:58:42: Starting minibatch loop.
07/14/2016 07:58:42:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.11389351 * 2560; EvalErrorPrediction = 0.57460937 * 2560; time = 0.0233s; samplesPerSecond = 109795.8
07/14/2016 07:58:42:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.11175117 * 2560; EvalErrorPrediction = 0.56054688 * 2560; time = 0.0216s; samplesPerSecond = 118408.9
07/14/2016 07:58:42:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.97933121 * 2560; EvalErrorPrediction = 0.53632813 * 2560; time = 0.0217s; samplesPerSecond = 118119.3
07/14/2016 07:58:42:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.94586182 * 2560; EvalErrorPrediction = 0.53554687 * 2560; time = 0.0216s; samplesPerSecond = 118272.1
07/14/2016 07:58:43:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.98697433 * 2560; EvalErrorPrediction = 0.54179687 * 2560; time = 0.0216s; samplesPerSecond = 118628.4
07/14/2016 07:58:43:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.97075500 * 2560; EvalErrorPrediction = 0.53671875 * 2560; time = 0.0217s; samplesPerSecond = 118146.6
07/14/2016 07:58:43:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.95994797 * 2560; EvalErrorPrediction = 0.53046875 * 2560; time = 0.0216s; samplesPerSecond = 118705.4
07/14/2016 07:58:43:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.97482452 * 2560; EvalErrorPrediction = 0.54257813 * 2560; time = 0.0216s; samplesPerSecond = 118633.9
07/14/2016 07:58:43: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 2.00541744 * 20480; EvalErrorPrediction = 0.54482422 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.176433s
07/14/2016 07:58:43: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'

07/14/2016 07:58:43: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

07/14/2016 07:58:43: Starting minibatch loop.
07/14/2016 07:58:43:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.92575645 * 10240; EvalErrorPrediction = 0.53691406 * 10240; time = 0.0563s; samplesPerSecond = 182015.3
07/14/2016 07:58:43:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.90395050 * 10240; EvalErrorPrediction = 0.52402344 * 10240; time = 0.0521s; samplesPerSecond = 196616.8
07/14/2016 07:58:43: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.91485348 * 20480; EvalErrorPrediction = 0.53046875 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=0.112716s
07/14/2016 07:58:43: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
07/14/2016 07:58:43: CNTKCommandTrainEnd: speechTrain

07/14/2016 07:58:43: Action "train" complete.

07/14/2016 07:58:43: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 07:04:27
		Last modified date: Wed Jul 13 07:40:26 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by svcphil on cntk-muc01
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
07/14/2016 07:58:44: -------------------------------------------------------------------
07/14/2016 07:58:44: Build info: 

07/14/2016 07:58:44: 		Built time: Jul 14 2016 07:04:27
07/14/2016 07:58:44: 		Last modified date: Wed Jul 13 07:40:26 2016
07/14/2016 07:58:44: 		Build type: Release
07/14/2016 07:58:44: 		Build target: GPU
07/14/2016 07:58:44: 		With 1bit-SGD: no
07/14/2016 07:58:44: 		Math lib: mkl
07/14/2016 07:58:44: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
07/14/2016 07:58:44: 		CUB_PATH: c:\src\cub-1.4.1
07/14/2016 07:58:44: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
07/14/2016 07:58:44: 		Build Branch: HEAD
07/14/2016 07:58:44: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
07/14/2016 07:58:44: 		Built by svcphil on cntk-muc01
07/14/2016 07:58:44: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
07/14/2016 07:58:44: -------------------------------------------------------------------
07/14/2016 07:58:45: -------------------------------------------------------------------
07/14/2016 07:58:45: GPU info:

07/14/2016 07:58:45: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
07/14/2016 07:58:45: -------------------------------------------------------------------

07/14/2016 07:58:45: Running on cntk-muc00 at 2016/07/14 07:58:45
07/14/2016 07:58:45: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true  makeMode=true



07/14/2016 07:58:45: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 07:58:45: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

07/14/2016 07:58:45: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 07:58:45: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 07:58:45: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

07/14/2016 07:58:45: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 07:58:45: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
07/14/2016 07:58:45: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 07:58:45: Commands: speechTrain
07/14/2016 07:58:45: Precision = "float"
07/14/2016 07:58:45: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
07/14/2016 07:58:45: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 07:58:45: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 07:58:45: ##############################################################################
07/14/2016 07:58:45: #                                                                            #
07/14/2016 07:58:45: # Action "train"                                                             #
07/14/2016 07:58:45: #                                                                            #
07/14/2016 07:58:45: ##############################################################################

07/14/2016 07:58:45: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 07:58:45: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 07:58:45: Loaded model with 25 nodes on GPU 0.

07/14/2016 07:58:45: Training criterion node(s):
07/14/2016 07:58:45: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 07:58:45: Evaluation criterion node(s):

07/14/2016 07:58:45: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
000000C1C0BB0980: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] }
000000C1C0BB0AC0: {[B2 Gradient[132 x 1]] }
000000C1C0BB0B60: {[W2*H1 Gradient[132 x 1 x *1]] }
000000C1C67B1E90: {[B0 Value[512 x 1]] }
000000C1CC84DC60: {[InvStdOfFeatures Value[363]] }
000000C1CC84EDE0: {[B1 Value[512 x 1]] }
000000C1CC84F4C0: {[B2 Value[132 x 1]] }
000000C1CC84F600: {[features Value[363 x *1]] }
000000C1CCAECB40: {[Prior Value[132]] }
000000C1CCAECC80: {[MVNormalizedFeatures Value[363 x *1]] }
000000C1CCAECD20: {[W0*features Value[512 x *1]] }
000000C1CCAECDC0: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }
000000C1CCAECE60: {[MeanOfFeatures Value[363]] }
000000C1CCAED0E0: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *1]] }
000000C1CCAED180: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *1]] }
000000C1CCAED400: {[W2 Value[132 x 512]] }
000000C1CCAED540: {[LogOfPrior Value[132]] }
000000C1CCAED5E0: {[W0*features+B0 Gradient[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
000000C1CCAED860: {[H2 Value[512 x 1 x *1]] [W1*H1 Gradient[512 x 1 x *1]] }
000000C1CCAEDAE0: {[W1 Value[512 x 512]] }
000000C1CCAEDCC0: {[CrossEntropyWithSoftmax Gradient[1]] }
000000C1CCAEDD60: {[H1 Value[512 x 1 x *1]] [W0*features Gradient[512 x *1]] }
000000C1CCAEE120: {[CrossEntropyWithSoftmax Value[1]] }
000000C1CCAEE260: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
000000C1CCAEE440: {[EvalErrorPrediction Value[1]] }
000000C1CCAEE4E0: {[HLast Value[132 x 1 x *1]] [W2 Gradient[132 x 512]] }
000000C1CCAEE6C0: {[labels Value[132 x *1]] }
000000C1CCAEE800: {[W0 Value[512 x 363]] }

07/14/2016 07:58:45: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 07:58:45: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 07:58:45: Starting minibatch loop.
07/14/2016 07:58:45:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.92575645 * 10240; EvalErrorPrediction = 0.53691406 * 10240; time = 0.1745s; samplesPerSecond = 58693.7
07/14/2016 07:58:45:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.90395050 * 10240; EvalErrorPrediction = 0.52402344 * 10240; time = 0.0515s; samplesPerSecond = 198688.3
07/14/2016 07:58:45: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.91485348 * 20480; EvalErrorPrediction = 0.53046875 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=0.397005s
07/14/2016 07:58:45: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160714075121.487046\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
07/14/2016 07:58:46: CNTKCommandTrainEnd: speechTrain

07/14/2016 07:58:46: Action "train" complete.

07/14/2016 07:58:46: __COMPLETED__