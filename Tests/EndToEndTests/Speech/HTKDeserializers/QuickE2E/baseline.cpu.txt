CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
07/14/2016 14:16:48: -------------------------------------------------------------------
07/14/2016 14:16:48: Build info: 

07/14/2016 14:16:48: 		Built time: Jul 14 2016 13:57:01
07/14/2016 14:16:48: 		Last modified date: Thu Jul 14 12:50:48 2016
07/14/2016 14:16:48: 		Build type: release
07/14/2016 14:16:48: 		Build target: GPU
07/14/2016 14:16:48: 		With 1bit-SGD: no
07/14/2016 14:16:48: 		Math lib: mkl
07/14/2016 14:16:48: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 14:16:48: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 14:16:48: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 14:16:48: 		Build Branch: HEAD
07/14/2016 14:16:48: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
07/14/2016 14:16:48: 		Built by philly on adf92da755f9
07/14/2016 14:16:48: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 14:16:48: -------------------------------------------------------------------
07/14/2016 14:16:49: -------------------------------------------------------------------
07/14/2016 14:16:49: GPU info:

07/14/2016 14:16:49: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:49: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:49: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:49: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:49: -------------------------------------------------------------------

07/14/2016 14:16:49: Running on localhost at 2016/07/14 14:16:49
07/14/2016 14:16:49: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true



07/14/2016 14:16:49: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 14:16:49: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

07/14/2016 14:16:49: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 14:16:49: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 14:16:49: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

07/14/2016 14:16:49: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 14:16:49: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
07/14/2016 14:16:49: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 14:16:49: Commands: speechTrain
07/14/2016 14:16:49: Precision = "float"
07/14/2016 14:16:49: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
07/14/2016 14:16:49: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 14:16:49: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 14:16:49: ##############################################################################
07/14/2016 14:16:49: #                                                                            #
07/14/2016 14:16:49: # Action "train"                                                             #
07/14/2016 14:16:49: #                                                                            #
07/14/2016 14:16:49: ##############################################################################

07/14/2016 14:16:49: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 14:16:49: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 14:16:49: Created model with 25 nodes on CPU.

07/14/2016 14:16:49: Training criterion node(s):
07/14/2016 14:16:49: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 14:16:49: Evaluation criterion node(s):

07/14/2016 14:16:49: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
0x7f3107a3a6a8: {[EvalErrorPrediction Value[1]] }
0x7f3107a3a808: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x7f3107a64e38: {[W1 Value[512 x 512]] }
0x7f3107a65618: {[W2*H1 Gradient[132 x 1 x *]] }
0x7f3107a657d8: {[B2 Gradient[132 x 1]] }
0x7f3107a82208: {[W2 Value[132 x 512]] }
0x7f3107a99968: {[B2 Value[132 x 1]] }
0x7f3107abf298: {[features Value[363 x *]] }
0x7f3107abf468: {[MeanOfFeatures Value[363]] }
0x7f3107abf8e8: {[Prior Value[132]] }
0x7f3107adcb28: {[B0 Value[512 x 1]] }
0x7f3107ae3f38: {[B1 Value[512 x 1]] }
0x7f3107afe858: {[MVNormalizedFeatures Value[363 x *]] }
0x7f310a709aa8: {[CrossEntropyWithSoftmax Value[1]] }
0x7f310a709ff8: {[W0*features Value[512 x *]] }
0x7f310a70a0a8: {[LogOfPrior Value[132]] }
0x7f310a70aa18: {[CrossEntropyWithSoftmax Gradient[1]] }
0x7f310a70abd8: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0x7f310a70af88: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
0x7f310a70b198: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
0x7f310a70b358: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0x7f310a70b518: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
0x7f310a71b4d8: {[labels Value[132 x *]] }
0x7f310a71f218: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
0x7f310a71f3d8: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0x7f310a71f598: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
0x7f310a7220a8: {[InvStdOfFeatures Value[363]] }
0x7f310a726cd8: {[W0 Value[512 x 363]] }


07/14/2016 14:16:49: Precomputing --> 3 PreCompute nodes found.

07/14/2016 14:16:49: 	MeanOfFeatures = Mean()
07/14/2016 14:16:49: 	InvStdOfFeatures = InvStdDev()
07/14/2016 14:16:49: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 14:16:51: Precomputing --> Completed.


07/14/2016 14:16:51: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 14:16:51: Starting minibatch loop.
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.44016991 * 640; EvalErrorPrediction = 0.89687500 * 640; time = 0.0463s; samplesPerSecond = 13827.4
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31343880 * 640; EvalErrorPrediction = 0.91250000 * 640; time = 0.0417s; samplesPerSecond = 15335.2
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.00195465 * 640; EvalErrorPrediction = 0.87968750 * 640; time = 0.0437s; samplesPerSecond = 14657.7
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.84959717 * 640; EvalErrorPrediction = 0.85000000 * 640; time = 0.0416s; samplesPerSecond = 15385.4
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.68914948 * 640; EvalErrorPrediction = 0.86406250 * 640; time = 0.0417s; samplesPerSecond = 15335.2
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.61843414 * 640; EvalErrorPrediction = 0.85468750 * 640; time = 0.0416s; samplesPerSecond = 15394.2
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.61517639 * 640; EvalErrorPrediction = 0.85156250 * 640; time = 0.0442s; samplesPerSecond = 14492.8
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.37467957 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.0417s; samplesPerSecond = 15347.0
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.35717163 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0415s; samplesPerSecond = 15425.4
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41891479 * 640; EvalErrorPrediction = 0.78593750 * 640; time = 0.0418s; samplesPerSecond = 15300.0
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.31023560 * 640; EvalErrorPrediction = 0.77500000 * 640; time = 0.0415s; samplesPerSecond = 15438.8
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.23588867 * 640; EvalErrorPrediction = 0.77968750 * 640; time = 0.0415s; samplesPerSecond = 15415.4
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.14390564 * 640; EvalErrorPrediction = 0.76718750 * 640; time = 0.0439s; samplesPerSecond = 14581.2
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.00065613 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.0553s; samplesPerSecond = 11574.1
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.07044678 * 640; EvalErrorPrediction = 0.73281250 * 640; time = 0.0418s; samplesPerSecond = 15313.2
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.93646851 * 640; EvalErrorPrediction = 0.69375000 * 640; time = 0.0439s; samplesPerSecond = 14583.9
07/14/2016 14:16:51:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.87405396 * 640; EvalErrorPrediction = 0.70625000 * 640; time = 0.0741s; samplesPerSecond = 8636.9
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.88241577 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.0778s; samplesPerSecond = 8229.7
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.75919800 * 640; EvalErrorPrediction = 0.66875000 * 640; time = 0.0416s; samplesPerSecond = 15391.6
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.64237671 * 640; EvalErrorPrediction = 0.67343750 * 640; time = 0.0447s; samplesPerSecond = 14307.8
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.63398437 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0429s; samplesPerSecond = 14921.5
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.49462891 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0442s; samplesPerSecond = 14493.4
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.65267334 * 640; EvalErrorPrediction = 0.68750000 * 640; time = 0.0416s; samplesPerSecond = 15390.5
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.42355957 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0417s; samplesPerSecond = 15358.4
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.44071655 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0417s; samplesPerSecond = 15329.3
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.41872559 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.0415s; samplesPerSecond = 15423.5
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.29118652 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.0421s; samplesPerSecond = 15196.8
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.29903564 * 640; EvalErrorPrediction = 0.60781250 * 640; time = 0.0414s; samplesPerSecond = 15461.9
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.25266724 * 640; EvalErrorPrediction = 0.62187500 * 640; time = 0.0416s; samplesPerSecond = 15402.8
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.12263794 * 640; EvalErrorPrediction = 0.57187500 * 640; time = 0.0415s; samplesPerSecond = 15433.6
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.29114990 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0415s; samplesPerSecond = 15422.1
07/14/2016 14:16:52:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.13164673 * 640; EvalErrorPrediction = 0.55937500 * 640; time = 0.0415s; samplesPerSecond = 15420.6
07/14/2016 14:16:52: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 2.99959202 * 20480; EvalErrorPrediction = 0.72519531 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=1.44598s
07/14/2016 14:16:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.1'

07/14/2016 14:16:52: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

07/14/2016 14:16:52: Starting minibatch loop.
07/14/2016 14:16:52:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.06436386 * 2560; EvalErrorPrediction = 0.55937500 * 2560; time = 0.1467s; samplesPerSecond = 17453.0
07/14/2016 14:16:52:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.01791916 * 2560; EvalErrorPrediction = 0.54453125 * 2560; time = 0.1303s; samplesPerSecond = 19639.7
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.00948410 * 2560; EvalErrorPrediction = 0.53867188 * 2560; time = 0.1294s; samplesPerSecond = 19783.2
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.96001968 * 2560; EvalErrorPrediction = 0.53593750 * 2560; time = 0.1354s; samplesPerSecond = 18901.6
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.93877487 * 2560; EvalErrorPrediction = 0.52734375 * 2560; time = 0.1303s; samplesPerSecond = 19642.6
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.95910721 * 2560; EvalErrorPrediction = 0.53554687 * 2560; time = 0.1308s; samplesPerSecond = 19574.3
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91710358 * 2560; EvalErrorPrediction = 0.52929688 * 2560; time = 0.1300s; samplesPerSecond = 19694.3
07/14/2016 14:16:53:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.86541595 * 2560; EvalErrorPrediction = 0.53007812 * 2560; time = 0.1291s; samplesPerSecond = 19829.6
07/14/2016 14:16:53: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.96652355 * 20480; EvalErrorPrediction = 0.53759766 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.06717s
07/14/2016 14:16:53: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'

07/14/2016 14:16:53: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

07/14/2016 14:16:53: Starting minibatch loop.
07/14/2016 14:16:54:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89021397 * 10240; EvalErrorPrediction = 0.52353516 * 10240; time = 0.4614s; samplesPerSecond = 22195.4
07/14/2016 14:16:54:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.85637455 * 10240; EvalErrorPrediction = 0.51230469 * 10240; time = 0.4466s; samplesPerSecond = 22930.1
07/14/2016 14:16:54: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.87329426 * 20480; EvalErrorPrediction = 0.51791992 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.913562s
07/14/2016 14:16:54: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
07/14/2016 14:16:54: CNTKCommandTrainEnd: speechTrain

07/14/2016 14:16:54: Action "train" complete.

07/14/2016 14:16:54: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
07/14/2016 14:16:54: -------------------------------------------------------------------
07/14/2016 14:16:54: Build info: 

07/14/2016 14:16:54: 		Built time: Jul 14 2016 13:57:01
07/14/2016 14:16:54: 		Last modified date: Thu Jul 14 12:50:48 2016
07/14/2016 14:16:54: 		Build type: release
07/14/2016 14:16:54: 		Build target: GPU
07/14/2016 14:16:54: 		With 1bit-SGD: no
07/14/2016 14:16:54: 		Math lib: mkl
07/14/2016 14:16:54: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 14:16:54: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 14:16:54: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 14:16:54: 		Build Branch: HEAD
07/14/2016 14:16:54: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
07/14/2016 14:16:54: 		Built by philly on adf92da755f9
07/14/2016 14:16:54: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
07/14/2016 14:16:54: -------------------------------------------------------------------
07/14/2016 14:16:55: -------------------------------------------------------------------
07/14/2016 14:16:55: GPU info:

07/14/2016 14:16:55: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:55: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:55: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:55: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
07/14/2016 14:16:55: -------------------------------------------------------------------

07/14/2016 14:16:55: Running on localhost at 2016/07/14 14:16:55
07/14/2016 14:16:55: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true  makeMode=true



07/14/2016 14:16:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 14:16:55: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

07/14/2016 14:16:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 14:16:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 14:16:55: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

07/14/2016 14:16:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 14:16:55: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
07/14/2016 14:16:55: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 14:16:55: Commands: speechTrain
07/14/2016 14:16:55: Precision = "float"
07/14/2016 14:16:55: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
07/14/2016 14:16:55: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 14:16:55: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 14:16:55: ##############################################################################
07/14/2016 14:16:55: #                                                                            #
07/14/2016 14:16:55: # Action "train"                                                             #
07/14/2016 14:16:55: #                                                                            #
07/14/2016 14:16:55: ##############################################################################

07/14/2016 14:16:55: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 14:16:55: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 14:16:55: Loaded model with 25 nodes on CPU.

07/14/2016 14:16:55: Training criterion node(s):
07/14/2016 14:16:55: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 14:16:55: Evaluation criterion node(s):

07/14/2016 14:16:55: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
0x7f4ab7a0a5a8: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *1]] }
0x7f4ab7a0a7b8: {[H1 Value[512 x 1 x *1]] [W0*features Gradient[512 x *1]] }
0x7f4ab7a0a978: {[W0*features+B0 Gradient[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
0x7f4ab7a0ab38: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *1]] }
0x7f4ab7a0c7a8: {[InvStdOfFeatures Value[363]] }
0x7f4ab7a11cd8: {[EvalErrorPrediction Value[1]] }
0x7f4ab7a1b508: {[labels Value[132 x *1]] }
0x7f4ab7a1f518: {[MVNormalizedFeatures Value[363 x *1]] }
0x7f4ab7a24aa8: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
0x7f4ab7a268a8: {[W0 Value[512 x 363]] }
0x7f4ab7a26e38: {[B2 Value[132 x 1]] }
0x7f4ab7a2a0e8: {[W1 Value[512 x 512]] }
0x7f4ab7a4ab58: {[B1 Value[512 x 1]] }
0x7f4ab7e65558: {[H2 Value[512 x 1 x *1]] [W1*H1 Gradient[512 x 1 x *1]] }
0x7f4ab7e65718: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }
0x7f4ab7e658d8: {[HLast Value[132 x 1 x *1]] [W2 Gradient[132 x 512]] }
0x7f4ab7e82208: {[MeanOfFeatures Value[363]] }
0x7f4ab7e8f0e8: {[CrossEntropyWithSoftmax Value[1]] }
0x7f4ab7e8f578: {[W0*features Value[512 x *1]] }
0x7f4ab7ea53c8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x7f4ab7ea5588: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] }
0x7f4ab7ea5748: {[W2*H1 Gradient[132 x 1 x *1]] }
0x7f4ab7ea5908: {[B2 Gradient[132 x 1]] }
0x7f4ab7ebf298: {[B0 Value[512 x 1]] }
0x7f4ab7ebf468: {[features Value[363 x *1]] }
0x7f4ab7ebf9c8: {[Prior Value[132]] }
0x7f4ab7ee90a8: {[W2 Value[132 x 512]] }
0x7f4ab7efe498: {[LogOfPrior Value[132]] }

07/14/2016 14:16:55: No PreCompute nodes found, skipping PreCompute step.

07/14/2016 14:16:55: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 14:16:55: Starting minibatch loop.
07/14/2016 14:16:56:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89021397 * 10240; EvalErrorPrediction = 0.52353516 * 10240; time = 0.7076s; samplesPerSecond = 14472.4
07/14/2016 14:16:57:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.85637455 * 10240; EvalErrorPrediction = 0.51230469 * 10240; time = 0.9469s; samplesPerSecond = 10814.1
07/14/2016 14:16:57: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.87329426 * 20480; EvalErrorPrediction = 0.51791992 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=1.73946s
07/14/2016 14:16:57: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
07/14/2016 14:16:57: CNTKCommandTrainEnd: speechTrain

07/14/2016 14:16:57: Action "train" complete.

07/14/2016 14:16:57: __COMPLETED__