CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
    Hardware threads: 24
    Total Memory: 33476764 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/repo/cntk_github/CNTK/x64/release/cntk.exe configFile=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data RunDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand OutputDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu DeviceId=-1 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 11:52:47
		Last modified date: Tue Jul 12 12:27:28 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: eldak/srandPlusPlus
		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76 (modified)
		Built by eldak on ELDAK-0
		Build Path: c:\repo\cntk_github\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
07/14/2016 17:17:54: -------------------------------------------------------------------
07/14/2016 17:17:54: Build info: 

07/14/2016 17:17:54: 		Built time: Jul 14 2016 11:52:47
07/14/2016 17:17:54: 		Last modified date: Tue Jul 12 12:27:28 2016
07/14/2016 17:17:54: 		Build type: Release
07/14/2016 17:17:54: 		Build target: GPU
07/14/2016 17:17:54: 		With 1bit-SGD: yes
07/14/2016 17:17:54: 		Math lib: acml
07/14/2016 17:17:54: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
07/14/2016 17:17:54: 		CUB_PATH: c:\Tools\cub-1.4.1\
07/14/2016 17:17:54: 		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
07/14/2016 17:17:54: 		Build Branch: eldak/srandPlusPlus
07/14/2016 17:17:54: 		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76 (modified)
07/14/2016 17:17:54: 		Built by eldak on ELDAK-0
07/14/2016 17:17:54: 		Build Path: c:\repo\cntk_github\CNTK\Source\CNTK\
07/14/2016 17:17:54: -------------------------------------------------------------------
07/14/2016 17:17:54: -------------------------------------------------------------------
07/14/2016 17:17:54: GPU info:

07/14/2016 17:17:54: 		Device[0]: cores = 576; computeCapability = 5.0; type = "Quadro K620"; memory = 2048 MB
07/14/2016 17:17:54: -------------------------------------------------------------------

07/14/2016 17:17:54: Running on ELDAK-0 at 2016/07/14 17:17:54
07/14/2016 17:17:54: Command line: 
C:\repo\cntk_github\CNTK\x64\release\cntk.exe  configFile=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk  currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu  DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand  OutputDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu  DeviceId=-1  timestamping=true  shareNodeValueMatrices=true



07/14/2016 17:17:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:17:54: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:17:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:17:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:17:54: precision = "float"
command = speechTrain:write
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/Output"
]
currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:17:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:17:54: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
configparameters: cntk.cntk:currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/Output"
]

07/14/2016 17:17:54: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 17:17:54: Commands: speechTrain write
07/14/2016 17:17:54: Precision = "float"
07/14/2016 17:17:54: CNTKModelPath: F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn
07/14/2016 17:17:54: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 17:17:54: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 17:17:54: ##############################################################################
07/14/2016 17:17:54: #                                                                            #
07/14/2016 17:17:54: # Action "train"                                                             #
07/14/2016 17:17:54: #                                                                            #
07/14/2016 17:17:54: ##############################################################################

07/14/2016 17:17:54: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 17:17:55: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 17:17:55: Created model with 25 nodes on CPU.

07/14/2016 17:17:55: Training criterion node(s):
07/14/2016 17:17:55: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 17:17:55: Evaluation criterion node(s):

07/14/2016 17:17:55: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
0000013B62F7D4C0: {[features Value[363 x *]] }
0000013B62F7D600: {[MeanOfFeatures Value[363]] }
0000013B62F7D880: {[InvStdOfFeatures Value[363]] }
0000013B62F7DB00: {[W0 Value[512 x 363]] }
0000013B62F7DBA0: {[B0 Value[512 x 1]] }
0000013B677E5CF0: {[W1 Gradient[512 x 512]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Gradient[132 x 1 x *]] }
0000013B677E60B0: {[Prior Value[132]] }
0000013B677E6150: {[labels Value[132 x *]] }
0000013B677E63D0: {[W1 Value[512 x 512]] }
0000013B677E6470: {[CrossEntropyWithSoftmax Gradient[1]] }
0000013B677E6790: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0000013B677E6830: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] [W0*features Value[512 x *]] }
0000013B677E6AB0: {[B2 Value[132 x 1]] }
0000013B677E6BF0: {[B2 Gradient[132 x 1]] }
0000013B677E6D30: {[CrossEntropyWithSoftmax Value[1]] }
0000013B677E6E70: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0000013B677E6F10: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] }
0000013B677E7190: {[W2 Value[132 x 512]] }
0000013B677E7230: {[LogOfPrior Value[132]] }
0000013B677E7370: {[MVNormalizedFeatures Value[363 x *]] }
0000013B677E7410: {[B1 Value[512 x 1]] }
0000013B677E75F0: {[EvalErrorPrediction Value[1]] }
0000013B677E7690: {[H2 Value[512 x 1 x *]] [W0 Gradient[512 x 363]] [W0*features+B0 Gradient[512 x 1 x *]] [W0*features+B0 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0000013B677E7730: {[W1*H1+B1 Value[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0000013B677E7910: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }


07/14/2016 17:17:55: Precomputing --> 3 PreCompute nodes found.

07/14/2016 17:17:55: 	MeanOfFeatures = Mean()
07/14/2016 17:17:55: 	InvStdOfFeatures = InvStdDev()
07/14/2016 17:17:55: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 17:17:56: Precomputing --> Completed.


07/14/2016 17:17:56: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 17:17:56: Starting minibatch loop.
07/14/2016 17:17:56:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.45416183 * 640; EvalErrorPrediction = 0.89687500 * 640; time = 0.1983s; samplesPerSecond = 3227.1
07/14/2016 17:17:56:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.33591232 * 640; EvalErrorPrediction = 0.88593750 * 640; time = 0.1615s; samplesPerSecond = 3963.6
07/14/2016 17:17:56:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.00507584 * 640; EvalErrorPrediction = 0.90781250 * 640; time = 0.0846s; samplesPerSecond = 7563.9
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.82761917 * 640; EvalErrorPrediction = 0.85468750 * 640; time = 0.0840s; samplesPerSecond = 7621.0
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.73892517 * 640; EvalErrorPrediction = 0.87187500 * 640; time = 0.1509s; samplesPerSecond = 4242.1
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.71035919 * 640; EvalErrorPrediction = 0.85937500 * 640; time = 0.0842s; samplesPerSecond = 7603.3
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.71827240 * 640; EvalErrorPrediction = 0.86406250 * 640; time = 0.0862s; samplesPerSecond = 7427.4
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.53746948 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0890s; samplesPerSecond = 7194.6
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.39240112 * 640; EvalErrorPrediction = 0.80937500 * 640; time = 0.0959s; samplesPerSecond = 6673.0
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.43721313 * 640; EvalErrorPrediction = 0.80156250 * 640; time = 0.0849s; samplesPerSecond = 7541.0
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.26914673 * 640; EvalErrorPrediction = 0.77968750 * 640; time = 0.0884s; samplesPerSecond = 7241.0
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.14848022 * 640; EvalErrorPrediction = 0.77031250 * 640; time = 0.0841s; samplesPerSecond = 7608.0
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.13805237 * 640; EvalErrorPrediction = 0.74375000 * 640; time = 0.0871s; samplesPerSecond = 7350.9
07/14/2016 17:17:57:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 2.99768066 * 640; EvalErrorPrediction = 0.71875000 * 640; time = 0.0853s; samplesPerSecond = 7503.6
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.01058655 * 640; EvalErrorPrediction = 0.73281250 * 640; time = 0.0902s; samplesPerSecond = 7096.4
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.02335815 * 640; EvalErrorPrediction = 0.74531250 * 640; time = 0.0860s; samplesPerSecond = 7443.4
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.93449707 * 640; EvalErrorPrediction = 0.71562500 * 640; time = 0.0865s; samplesPerSecond = 7400.1
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.77169189 * 640; EvalErrorPrediction = 0.69062500 * 640; time = 0.0879s; samplesPerSecond = 7278.9
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.80254517 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.0849s; samplesPerSecond = 7537.2
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.64219360 * 640; EvalErrorPrediction = 0.68437500 * 640; time = 0.0860s; samplesPerSecond = 7445.0
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.59237061 * 640; EvalErrorPrediction = 0.65937500 * 640; time = 0.0845s; samplesPerSecond = 7576.0
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.66094971 * 640; EvalErrorPrediction = 0.68906250 * 640; time = 0.0873s; samplesPerSecond = 7335.2
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.49158325 * 640; EvalErrorPrediction = 0.65781250 * 640; time = 0.0855s; samplesPerSecond = 7487.8
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.60665283 * 640; EvalErrorPrediction = 0.66093750 * 640; time = 0.0883s; samplesPerSecond = 7251.2
07/14/2016 17:17:58:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.50169678 * 640; EvalErrorPrediction = 0.63125000 * 640; time = 0.0853s; samplesPerSecond = 7505.5
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.35502319 * 640; EvalErrorPrediction = 0.59687500 * 640; time = 0.0845s; samplesPerSecond = 7569.9
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.32070923 * 640; EvalErrorPrediction = 0.60156250 * 640; time = 0.0854s; samplesPerSecond = 7494.8
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.37646484 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.0853s; samplesPerSecond = 7500.7
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.28159180 * 640; EvalErrorPrediction = 0.58906250 * 640; time = 0.0854s; samplesPerSecond = 7494.8
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.26444702 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.0842s; samplesPerSecond = 7601.3
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.24143066 * 640; EvalErrorPrediction = 0.58125000 * 640; time = 0.0940s; samplesPerSecond = 6806.9
07/14/2016 17:17:59:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.28500977 * 640; EvalErrorPrediction = 0.61875000 * 640; time = 0.0866s; samplesPerSecond = 7392.6
07/14/2016 17:17:59: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 3.02729912 * 20480; EvalErrorPrediction = 0.72924805 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=3.02464s
07/14/2016 17:17:59: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.1'

07/14/2016 17:17:59: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

07/14/2016 17:17:59: Starting minibatch loop.
07/14/2016 17:17:59:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.11730957 * 2560; EvalErrorPrediction = 0.56992188 * 2560; time = 0.1945s; samplesPerSecond = 13160.0
07/14/2016 17:18:00:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.11358147 * 2560; EvalErrorPrediction = 0.55742187 * 2560; time = 0.1998s; samplesPerSecond = 12814.9
07/14/2016 17:18:00:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.98852043 * 2560; EvalErrorPrediction = 0.53828125 * 2560; time = 0.1941s; samplesPerSecond = 13188.7
07/14/2016 17:18:00:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.95062408 * 2560; EvalErrorPrediction = 0.53437500 * 2560; time = 0.1977s; samplesPerSecond = 12951.0
07/14/2016 17:18:00:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.99604340 * 2560; EvalErrorPrediction = 0.54257813 * 2560; time = 0.1961s; samplesPerSecond = 13057.0
07/14/2016 17:18:00:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.97745819 * 2560; EvalErrorPrediction = 0.53828125 * 2560; time = 0.1947s; samplesPerSecond = 13147.8
07/14/2016 17:18:01:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.96707535 * 2560; EvalErrorPrediction = 0.53437500 * 2560; time = 0.1927s; samplesPerSecond = 13288.1
07/14/2016 17:18:01:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.97957458 * 2560; EvalErrorPrediction = 0.54335937 * 2560; time = 0.2006s; samplesPerSecond = 12761.1
07/14/2016 17:18:01: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 2.01127338 * 20480; EvalErrorPrediction = 0.54482422 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.57248s
07/14/2016 17:18:01: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.2'

07/14/2016 17:18:01: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

07/14/2016 17:18:01: Starting minibatch loop.
07/14/2016 17:18:01:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.93107796 * 10240; EvalErrorPrediction = 0.53964844 * 10240; time = 0.6696s; samplesPerSecond = 15293.6
07/14/2016 17:18:02:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.91622391 * 10240; EvalErrorPrediction = 0.52802734 * 10240; time = 0.5835s; samplesPerSecond = 17549.3
07/14/2016 17:18:02: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.92365093 * 20480; EvalErrorPrediction = 0.53383789 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=1.26019s
07/14/2016 17:18:02: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn'
07/14/2016 17:18:02: CNTKCommandTrainEnd: speechTrain

07/14/2016 17:18:02: Action "train" complete.


07/14/2016 17:18:02: ##############################################################################
07/14/2016 17:18:02: #                                                                            #
07/14/2016 17:18:02: # Action "write"                                                             #
07/14/2016 17:18:02: #                                                                            #
07/14/2016 17:18:02: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[512 x 1]] [B1 Gradient[512 x 1]] [B2 Gradient[132 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[512 x 1 x *1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [W0 Gradient[512 x 363]] [W0*features Gradient[512 x *1]] [W0*features+B0 Gradient[512 x 1 x *1]] [W1 Gradient[512 x 512]] [W1*H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2 Gradient[132 x 512]] [W2*H1 Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
0000013B62F7CFC0: {[LogOfPrior Value[132]] }
0000013B62F7D4C0: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
0000013B62F7D6A0: {[H1 Value[512 x 1 x *1]] [W0*features Value[512 x *1]] [W1*H1+B1 Value[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }
0000013B62F7DBA0: {[H2 Value[512 x 1 x *1]] [HLast Value[132 x 1 x *1]] [MVNormalizedFeatures Value[363 x *1]] [W0*features+B0 Value[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
0000013B6BFCC810: {[B1 Value[512 x 1]] }
0000013B6BFCC9F0: {[Prior Value[132]] }
0000013B6BFCCB30: {[W2 Value[132 x 512]] }
0000013B6BFCD210: {[InvStdOfFeatures Value[363]] }
0000013B6BFCD8F0: {[W1 Value[512 x 512]] }
0000013B6BFCDDF0: {[MeanOfFeatures Value[363]] }
0000013B6BFCE110: {[W0 Value[512 x 363]] }
0000013B6BFCE250: {[features Value[363 x *1]] }
0000013B6BFCE2F0: {[labels Value[132 x *1]] }
0000013B6BFCE570: {[B0 Value[512 x 1]] }
0000013B6BFCE6B0: {[B2 Value[132 x 1]] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to F:\cygwin64\tmp\cntk-test-20160714181753.940113\Speech\DNN_WriteCommand@release_cpu/Output*
Total Samples Evaluated = 3250

07/14/2016 17:18:03: Action "write" complete.

07/14/2016 17:18:03: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /tmp/cntk-test-20160714181753.940113/Speech/DNN_WriteCommand@release_cpu/Output.ScaledLogLikelihood.diff
