CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
    Hardware threads: 24
    Total Memory: 32868408 kB
-------------------------------------------------------------------
=== Running /home/eldar/r/cntk/CNTK/build/release/bin/cntk configFile=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand OutputDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu DeviceId=-1 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 09:31:09
		Last modified date: Thu Jul 14 09:21:16 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: eldak/srandPlusPlus
		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76
		Built by eldar on GAIZKA-UBUNTU
		Build Path: /home/eldar/r/cntk/CNTK
-------------------------------------------------------------------
Changed current directory to /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
07/14/2016 17:27:36: -------------------------------------------------------------------
07/14/2016 17:27:36: Build info: 

07/14/2016 17:27:36: 		Built time: Jul 14 2016 09:31:09
07/14/2016 17:27:36: 		Last modified date: Thu Jul 14 09:21:16 2016
07/14/2016 17:27:36: 		Build type: release
07/14/2016 17:27:36: 		Build target: GPU
07/14/2016 17:27:36: 		With 1bit-SGD: no
07/14/2016 17:27:36: 		Math lib: acml
07/14/2016 17:27:36: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 17:27:36: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 17:27:36: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 17:27:36: 		Build Branch: eldak/srandPlusPlus
07/14/2016 17:27:36: 		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76
07/14/2016 17:27:36: 		Built by eldar on GAIZKA-UBUNTU
07/14/2016 17:27:36: 		Build Path: /home/eldar/r/cntk/CNTK
07/14/2016 17:27:36: -------------------------------------------------------------------
07/14/2016 17:27:37: -------------------------------------------------------------------
07/14/2016 17:27:37: GPU info:

07/14/2016 17:27:37: 		Device[0]: cores = 1536; computeCapability = 5.2; type = "GeForce GTX 960"; memory = 1987 MB
07/14/2016 17:27:37: 		Device[1]: cores = 576; computeCapability = 5.0; type = "Quadro K620"; memory = 1991 MB
07/14/2016 17:27:37: -------------------------------------------------------------------

07/14/2016 17:27:37: Running on localhost at 2016/07/14 17:27:37
07/14/2016 17:27:37: Command line: 
/home/eldar/r/cntk/CNTK/build/release/bin/cntk  configFile=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk  currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu  DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand  OutputDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu  DeviceId=-1  timestamping=true  shareNodeValueMatrices=true



07/14/2016 17:27:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:27:37: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:27:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:27:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:27:37: precision = "float"
command = speechTrain:write
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/Output"
]
currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:27:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:27:37: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
configparameters: cntk.cntk:currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/Output"
]

07/14/2016 17:27:37: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 17:27:37: Commands: speechTrain write
07/14/2016 17:27:37: Precision = "float"
07/14/2016 17:27:37: CNTKModelPath: /tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn
07/14/2016 17:27:37: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 17:27:37: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 17:27:37: ##############################################################################
07/14/2016 17:27:37: #                                                                            #
07/14/2016 17:27:37: # Action "train"                                                             #
07/14/2016 17:27:37: #                                                                            #
07/14/2016 17:27:37: ##############################################################################

07/14/2016 17:27:37: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 17:27:37: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 17:27:37: Created model with 25 nodes on CPU.

07/14/2016 17:27:37: Training criterion node(s):
07/14/2016 17:27:37: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 17:27:37: Evaluation criterion node(s):

07/14/2016 17:27:37: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
0x2c0a958: {[MeanOfFeatures Value[363]] }
0x2c0ac28: {[features Value[363 x *]] }
0x2c0f808: {[W1 Value[512 x 512]] }
0x2c0fb28: {[B0 Value[512 x 1]] }
0x2c1ddc8: {[EvalErrorPrediction Value[1]] }
0x2c1df28: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x2c1f1f8: {[B1 Value[512 x 1]] }
0x2c20ae8: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] }
0x2d79a28: {[B2 Value[132 x 1]] }
0x2d79b28: {[labels Value[132 x *]] }
0x2d95448: {[W0 Value[512 x 363]] }
0x30cc0f8: {[W2 Value[132 x 512]] }
0x30e8df8: {[MVNormalizedFeatures Value[363 x *]] }
0x30e9118: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] [W0*features Value[512 x *]] }
0x30e92d8: {[H2 Value[512 x 1 x *]] [W0 Gradient[512 x 363]] [W0*features+B0 Gradient[512 x 1 x *]] [W0*features+B0 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0x30e9498: {[W1*H1+B1 Value[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0x31021e8: {[CrossEntropyWithSoftmax Value[1]] }
0x3102648: {[LogOfPrior Value[132]] }
0x3105ad8: {[Prior Value[132]] }
0x3a1c918: {[InvStdOfFeatures Value[363]] }
0x3a247a8: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
0x3a25148: {[CrossEntropyWithSoftmax Gradient[1]] }
0x3a25308: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0x3a254c8: {[W1 Gradient[512 x 512]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Gradient[132 x 1 x *]] }
0x3a25688: {[B2 Gradient[132 x 1]] }


07/14/2016 17:27:37: Precomputing --> 3 PreCompute nodes found.

07/14/2016 17:27:37: 	MeanOfFeatures = Mean()
07/14/2016 17:27:37: 	InvStdOfFeatures = InvStdDev()
07/14/2016 17:27:37: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 17:27:39: Precomputing --> Completed.


07/14/2016 17:27:39: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 17:27:39: Starting minibatch loop.
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.44016991 * 640; EvalErrorPrediction = 0.89687500 * 640; time = 0.1547s; samplesPerSecond = 4136.2
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31343880 * 640; EvalErrorPrediction = 0.91250000 * 640; time = 0.1515s; samplesPerSecond = 4224.3
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.00195465 * 640; EvalErrorPrediction = 0.87968750 * 640; time = 0.0991s; samplesPerSecond = 6458.7
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.84959717 * 640; EvalErrorPrediction = 0.85000000 * 640; time = 0.0509s; samplesPerSecond = 12573.2
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.68914948 * 640; EvalErrorPrediction = 0.86406250 * 640; time = 0.0503s; samplesPerSecond = 12732.0
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.61843414 * 640; EvalErrorPrediction = 0.85468750 * 640; time = 0.0508s; samplesPerSecond = 12607.1
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.61517639 * 640; EvalErrorPrediction = 0.85156250 * 640; time = 0.0506s; samplesPerSecond = 12644.7
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.37467957 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.0504s; samplesPerSecond = 12693.4
07/14/2016 17:27:39:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.35717163 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0507s; samplesPerSecond = 12616.3
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41891479 * 640; EvalErrorPrediction = 0.78593750 * 640; time = 0.0507s; samplesPerSecond = 12619.3
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.31023560 * 640; EvalErrorPrediction = 0.77500000 * 640; time = 0.0524s; samplesPerSecond = 12217.0
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.23588867 * 640; EvalErrorPrediction = 0.77968750 * 640; time = 0.0509s; samplesPerSecond = 12582.6
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.14390564 * 640; EvalErrorPrediction = 0.76718750 * 640; time = 0.0509s; samplesPerSecond = 12562.3
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.00065613 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.0511s; samplesPerSecond = 12518.8
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.07044678 * 640; EvalErrorPrediction = 0.73281250 * 640; time = 0.0507s; samplesPerSecond = 12623.3
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.93646851 * 640; EvalErrorPrediction = 0.69375000 * 640; time = 0.0506s; samplesPerSecond = 12652.5
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.87405396 * 640; EvalErrorPrediction = 0.70625000 * 640; time = 0.0505s; samplesPerSecond = 12662.7
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.88241577 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.0508s; samplesPerSecond = 12589.5
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.75919800 * 640; EvalErrorPrediction = 0.66875000 * 640; time = 0.0505s; samplesPerSecond = 12661.2
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.64237671 * 640; EvalErrorPrediction = 0.67343750 * 640; time = 0.0507s; samplesPerSecond = 12613.1
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.63398437 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0505s; samplesPerSecond = 12680.8
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.49462891 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0506s; samplesPerSecond = 12638.2
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.65267334 * 640; EvalErrorPrediction = 0.68750000 * 640; time = 0.0510s; samplesPerSecond = 12559.4
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.42355957 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0508s; samplesPerSecond = 12607.4
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.44071655 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0508s; samplesPerSecond = 12593.0
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.41872559 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.0507s; samplesPerSecond = 12631.7
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.29118652 * 640; EvalErrorPrediction = 0.62656250 * 640; time = 0.0505s; samplesPerSecond = 12674.3
07/14/2016 17:27:40:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.29903564 * 640; EvalErrorPrediction = 0.60781250 * 640; time = 0.0506s; samplesPerSecond = 12645.7
07/14/2016 17:27:41:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.25266724 * 640; EvalErrorPrediction = 0.62187500 * 640; time = 0.0506s; samplesPerSecond = 12649.2
07/14/2016 17:27:41:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.12263794 * 640; EvalErrorPrediction = 0.57187500 * 640; time = 0.0505s; samplesPerSecond = 12664.7
07/14/2016 17:27:41:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.29114990 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0508s; samplesPerSecond = 12595.9
07/14/2016 17:27:41:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.13164673 * 640; EvalErrorPrediction = 0.55937500 * 640; time = 0.0504s; samplesPerSecond = 12695.4
07/14/2016 17:27:41: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 2.99959202 * 20480; EvalErrorPrediction = 0.72519531 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=1.88501s
07/14/2016 17:27:41: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.1'

07/14/2016 17:27:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

07/14/2016 17:27:41: Starting minibatch loop.
07/14/2016 17:27:41:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.06436386 * 2560; EvalErrorPrediction = 0.55937500 * 2560; time = 0.1583s; samplesPerSecond = 16171.3
07/14/2016 17:27:41:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.01791916 * 2560; EvalErrorPrediction = 0.54453125 * 2560; time = 0.1470s; samplesPerSecond = 17420.4
07/14/2016 17:27:41:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.00948410 * 2560; EvalErrorPrediction = 0.53867188 * 2560; time = 0.1468s; samplesPerSecond = 17440.6
07/14/2016 17:27:41:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.96001968 * 2560; EvalErrorPrediction = 0.53593750 * 2560; time = 0.1475s; samplesPerSecond = 17351.7
07/14/2016 17:27:41:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.93877487 * 2560; EvalErrorPrediction = 0.52734375 * 2560; time = 0.1472s; samplesPerSecond = 17394.5
07/14/2016 17:27:42:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.95910721 * 2560; EvalErrorPrediction = 0.53554687 * 2560; time = 0.1471s; samplesPerSecond = 17401.9
07/14/2016 17:27:42:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91710510 * 2560; EvalErrorPrediction = 0.52929688 * 2560; time = 0.1469s; samplesPerSecond = 17425.5
07/14/2016 17:27:42:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.86541595 * 2560; EvalErrorPrediction = 0.53007812 * 2560; time = 0.1470s; samplesPerSecond = 17418.5
07/14/2016 17:27:42: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.96652374 * 20480; EvalErrorPrediction = 0.53759766 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.19145s
07/14/2016 17:27:42: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.2'

07/14/2016 17:27:42: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

07/14/2016 17:27:42: Starting minibatch loop.
07/14/2016 17:27:43:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89021397 * 10240; EvalErrorPrediction = 0.52353516 * 10240; time = 0.5306s; samplesPerSecond = 19298.8
07/14/2016 17:27:43:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.85637455 * 10240; EvalErrorPrediction = 0.51230469 * 10240; time = 0.4982s; samplesPerSecond = 20553.0
07/14/2016 17:27:43: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.87329426 * 20480; EvalErrorPrediction = 0.51791992 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=1.03412s
07/14/2016 17:27:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn'
07/14/2016 17:27:43: CNTKCommandTrainEnd: speechTrain

07/14/2016 17:27:43: Action "train" complete.


07/14/2016 17:27:43: ##############################################################################
07/14/2016 17:27:43: #                                                                            #
07/14/2016 17:27:43: # Action "write"                                                             #
07/14/2016 17:27:43: #                                                                            #
07/14/2016 17:27:43: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[512 x 1]] [B1 Gradient[512 x 1]] [B2 Gradient[132 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[512 x 1 x *1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [W0 Gradient[512 x 363]] [W0*features Gradient[512 x *1]] [W0*features+B0 Gradient[512 x 1 x *1]] [W1 Gradient[512 x 512]] [W1*H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2 Gradient[132 x 512]] [W2*H1 Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
0x2bf7268: {[InvStdOfFeatures Value[363]] }
0x2bf7b28: {[labels Value[132 x *1]] }
0x2bf7d08: {[MeanOfFeatures Value[363]] }
0x2c1f5d8: {[B0 Value[512 x 1]] }
0x2c1f8d8: {[B1 Value[512 x 1]] }
0x2c1fbd8: {[B2 Value[132 x 1]] }
0x30a83d8: {[features Value[363 x *1]] }
0x30e8be8: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
0x3100f58: {[Prior Value[132]] }
0x31021d8: {[W0 Value[512 x 363]] }
0x3102b38: {[W1 Value[512 x 512]] }
0x3103578: {[W2 Value[132 x 512]] }
0x3a3f878: {[LogOfPrior Value[132]] }
0x3a415f8: {[H2 Value[512 x 1 x *1]] [HLast Value[132 x 1 x *1]] [MVNormalizedFeatures Value[363 x *1]] [W0*features+B0 Value[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
0x3a419a8: {[H1 Value[512 x 1 x *1]] [W0*features Value[512 x *1]] [W1*H1+B1 Value[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to /tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/Output*
Total Samples Evaluated = 3250

07/14/2016 17:27:44: Action "write" complete.

07/14/2016 17:27:44: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /tmp/cntk-test-20160714172736.235676/Speech/DNN_WriteCommand@release_cpu/Output.ScaledLogLikelihood.diff
