CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
    Hardware threads: 24
    Total Memory: 32868408 kB
-------------------------------------------------------------------
=== Running /home/eldar/r/cntk/CNTK/build/release/bin/cntk configFile=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand OutputDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu DeviceId=0 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 09:31:09
		Last modified date: Thu Jul 14 09:21:16 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: eldak/srandPlusPlus
		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76
		Built by eldar on GAIZKA-UBUNTU
		Build Path: /home/eldar/r/cntk/CNTK
-------------------------------------------------------------------
Changed current directory to /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
07/14/2016 17:25:41: -------------------------------------------------------------------
07/14/2016 17:25:41: Build info: 

07/14/2016 17:25:41: 		Built time: Jul 14 2016 09:31:09
07/14/2016 17:25:41: 		Last modified date: Thu Jul 14 09:21:16 2016
07/14/2016 17:25:41: 		Build type: release
07/14/2016 17:25:41: 		Build target: GPU
07/14/2016 17:25:41: 		With 1bit-SGD: no
07/14/2016 17:25:41: 		Math lib: acml
07/14/2016 17:25:41: 		CUDA_PATH: /usr/local/cuda-7.5
07/14/2016 17:25:41: 		CUB_PATH: /usr/local/cub-1.4.1
07/14/2016 17:25:41: 		CUDNN_PATH: /usr/local/cudnn-4.0
07/14/2016 17:25:41: 		Build Branch: eldak/srandPlusPlus
07/14/2016 17:25:41: 		Build SHA1: 49402ef2579cc6d01f6f05b5efc72c25a7efcb76
07/14/2016 17:25:41: 		Built by eldar on GAIZKA-UBUNTU
07/14/2016 17:25:41: 		Build Path: /home/eldar/r/cntk/CNTK
07/14/2016 17:25:41: -------------------------------------------------------------------
07/14/2016 17:25:42: -------------------------------------------------------------------
07/14/2016 17:25:42: GPU info:

07/14/2016 17:25:42: 		Device[0]: cores = 1536; computeCapability = 5.2; type = "GeForce GTX 960"; memory = 1987 MB
07/14/2016 17:25:42: 		Device[1]: cores = 576; computeCapability = 5.0; type = "Quadro K620"; memory = 1991 MB
07/14/2016 17:25:42: -------------------------------------------------------------------

07/14/2016 17:25:42: Running on localhost at 2016/07/14 17:25:42
07/14/2016 17:25:42: Command line: 
/home/eldar/r/cntk/CNTK/build/release/bin/cntk  configFile=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk  currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu  DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand  OutputDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu  DeviceId=0  timestamping=true  shareNodeValueMatrices=true



07/14/2016 17:25:42: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:25:42: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
DeviceId=0
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:25:42: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:25:42: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
07/14/2016 17:25:42: precision = "float"
command = speechTrain:write
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = 0
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/Output"
]
currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
DeviceId=0
timestamping=true
shareNodeValueMatrices=true

07/14/2016 17:25:42: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

07/14/2016 17:25:42: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/DNN/WriteCommand
configparameters: cntk.cntk:currentDirectory=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = 0
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/Output"
]

07/14/2016 17:25:42: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
07/14/2016 17:25:42: Commands: speechTrain write
07/14/2016 17:25:42: Precision = "float"
07/14/2016 17:25:42: CNTKModelPath: /tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn
07/14/2016 17:25:42: CNTKCommandTrainInfo: speechTrain : 3
07/14/2016 17:25:42: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

07/14/2016 17:25:42: ##############################################################################
07/14/2016 17:25:42: #                                                                            #
07/14/2016 17:25:42: # Action "train"                                                             #
07/14/2016 17:25:42: #                                                                            #
07/14/2016 17:25:42: ##############################################################################

07/14/2016 17:25:42: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 946 entries
total 132 state names in state list /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/eldar/r/cntk/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
label set 0: 129 classes
minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
07/14/2016 17:25:42: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

07/14/2016 17:25:42: Created model with 25 nodes on GPU 0.

07/14/2016 17:25:42: Training criterion node(s):
07/14/2016 17:25:42: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

07/14/2016 17:25:42: Evaluation criterion node(s):

07/14/2016 17:25:42: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
0x273bb68: {[features Value[363 x *]] }
0x27b5518: {[B0 Value[512 x 1]] }
0x2db46a8: {[W0 Value[512 x 363]] }
0x386a038: {[W1 Value[512 x 512]] }
0x386ac88: {[B1 Value[512 x 1]] }
0x386bc28: {[W2 Value[132 x 512]] }
0x386c548: {[B2 Value[132 x 1]] }
0x386d8f8: {[labels Value[132 x *]] }
0x386eac8: {[Prior Value[132]] }
0x3872fb8: {[EvalErrorPrediction Value[1]] }
0x38744e8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x38746a8: {[CrossEntropyWithSoftmax Value[1]] }
0x3874ac8: {[H2 Value[512 x 1 x *]] [W0 Gradient[512 x 363]] [W0*features+B0 Gradient[512 x 1 x *]] [W0*features+B0 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0x3874c28: {[W1*H1+B1 Value[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0x3874d48: {[LogOfPrior Value[132]] }
0x3876fd8: {[MVNormalizedFeatures Value[363 x *]] }
0x38772f8: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] [W0*features Value[512 x *]] }
0x38774b8: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
0x3877dc8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x3877f88: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0x3878148: {[W1 Gradient[512 x 512]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Gradient[132 x 1 x *]] }
0x3878308: {[B2 Gradient[132 x 1]] }
0x38784f8: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] }
0x48b8f18: {[MeanOfFeatures Value[363]] }
0x48b9428: {[InvStdOfFeatures Value[363]] }


07/14/2016 17:25:42: Precomputing --> 3 PreCompute nodes found.

07/14/2016 17:25:42: 	MeanOfFeatures = Mean()
07/14/2016 17:25:42: 	InvStdOfFeatures = InvStdDev()
07/14/2016 17:25:42: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

07/14/2016 17:25:43: Precomputing --> Completed.


07/14/2016 17:25:43: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

07/14/2016 17:25:43: Starting minibatch loop.
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.43175049 * 640; EvalErrorPrediction = 0.89687500 * 640; time = 0.0118s; samplesPerSecond = 54163.8
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31479950 * 640; EvalErrorPrediction = 0.91250000 * 640; time = 0.0104s; samplesPerSecond = 61373.2
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.00219116 * 640; EvalErrorPrediction = 0.87343750 * 640; time = 0.0104s; samplesPerSecond = 61355.6
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.85458832 * 640; EvalErrorPrediction = 0.85000000 * 640; time = 0.0103s; samplesPerSecond = 61919.5
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.69650421 * 640; EvalErrorPrediction = 0.85781250 * 640; time = 0.0104s; samplesPerSecond = 61579.9
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.61849670 * 640; EvalErrorPrediction = 0.86093750 * 640; time = 0.0104s; samplesPerSecond = 61680.8
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.60577545 * 640; EvalErrorPrediction = 0.84687500 * 640; time = 0.0104s; samplesPerSecond = 61574.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.36638489 * 640; EvalErrorPrediction = 0.79843750 * 640; time = 0.0104s; samplesPerSecond = 61485.3
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.34688721 * 640; EvalErrorPrediction = 0.79843750 * 640; time = 0.0104s; samplesPerSecond = 61449.8
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.39504700 * 640; EvalErrorPrediction = 0.77500000 * 640; time = 0.0104s; samplesPerSecond = 61562.1
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.28059387 * 640; EvalErrorPrediction = 0.76250000 * 640; time = 0.0104s; samplesPerSecond = 61782.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.20159607 * 640; EvalErrorPrediction = 0.76875000 * 640; time = 0.0104s; samplesPerSecond = 61526.6
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.11371765 * 640; EvalErrorPrediction = 0.76093750 * 640; time = 0.0104s; samplesPerSecond = 61657.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 2.96736145 * 640; EvalErrorPrediction = 0.72656250 * 640; time = 0.0104s; samplesPerSecond = 61639.2
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.04701843 * 640; EvalErrorPrediction = 0.73750000 * 640; time = 0.0104s; samplesPerSecond = 61782.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 2.91791382 * 640; EvalErrorPrediction = 0.68750000 * 640; time = 0.0104s; samplesPerSecond = 61562.1
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.85393066 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.0104s; samplesPerSecond = 61794.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.86520386 * 640; EvalErrorPrediction = 0.70000000 * 640; time = 0.0104s; samplesPerSecond = 61461.6
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.73497925 * 640; EvalErrorPrediction = 0.66406250 * 640; time = 0.0104s; samplesPerSecond = 61562.1
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.61762085 * 640; EvalErrorPrediction = 0.66718750 * 640; time = 0.0104s; samplesPerSecond = 61568.1
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.60917358 * 640; EvalErrorPrediction = 0.64375000 * 640; time = 0.0104s; samplesPerSecond = 61794.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.46868286 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.0104s; samplesPerSecond = 61728.4
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.63320923 * 640; EvalErrorPrediction = 0.68593750 * 640; time = 0.0105s; samplesPerSecond = 61167.9
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.39415283 * 640; EvalErrorPrediction = 0.63437500 * 640; time = 0.0104s; samplesPerSecond = 61674.9
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.41368408 * 640; EvalErrorPrediction = 0.62187500 * 640; time = 0.0104s; samplesPerSecond = 61794.0
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.38572998 * 640; EvalErrorPrediction = 0.62812500 * 640; time = 0.0104s; samplesPerSecond = 61776.1
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.27224121 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0104s; samplesPerSecond = 61621.4
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.28541870 * 640; EvalErrorPrediction = 0.60000000 * 640; time = 0.0113s; samplesPerSecond = 56732.6
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.23679199 * 640; EvalErrorPrediction = 0.61562500 * 640; time = 0.0105s; samplesPerSecond = 61232.3
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.09804688 * 640; EvalErrorPrediction = 0.55156250 * 640; time = 0.0104s; samplesPerSecond = 61544.4
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.26342163 * 640; EvalErrorPrediction = 0.61718750 * 640; time = 0.0104s; samplesPerSecond = 61491.2
07/14/2016 17:25:43:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.10312500 * 640; EvalErrorPrediction = 0.54843750 * 640; time = 0.0105s; samplesPerSecond = 61027.9
07/14/2016 17:25:43: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 2.98112621 * 20480; EvalErrorPrediction = 0.72016602 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=0.337158s
07/14/2016 17:25:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn.1'

07/14/2016 17:25:43: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

07/14/2016 17:25:43: Starting minibatch loop.
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.03823891 * 2560; EvalErrorPrediction = 0.55156250 * 2560; time = 0.0175s; samplesPerSecond = 145952.1
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 1.99128799 * 2560; EvalErrorPrediction = 0.54257813 * 2560; time = 0.0156s; samplesPerSecond = 163965.9
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.97657089 * 2560; EvalErrorPrediction = 0.53710938 * 2560; time = 0.0156s; samplesPerSecond = 163934.4
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.92676125 * 2560; EvalErrorPrediction = 0.53437500 * 2560; time = 0.0156s; samplesPerSecond = 164556.1
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.90556793 * 2560; EvalErrorPrediction = 0.52890625 * 2560; time = 0.0156s; samplesPerSecond = 164134.1
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.92869720 * 2560; EvalErrorPrediction = 0.53085938 * 2560; time = 0.0156s; samplesPerSecond = 164492.7
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.89329758 * 2560; EvalErrorPrediction = 0.52460938 * 2560; time = 0.0156s; samplesPerSecond = 164461.0
07/14/2016 17:25:43:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.83673553 * 2560; EvalErrorPrediction = 0.51953125 * 2560; time = 0.0155s; samplesPerSecond = 164630.2
07/14/2016 17:25:43: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.93714466 * 20480; EvalErrorPrediction = 0.53369141 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.128331s
07/14/2016 17:25:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn.2'

07/14/2016 17:25:43: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

07/14/2016 17:25:43: Starting minibatch loop.
07/14/2016 17:25:43:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.86187706 * 10240; EvalErrorPrediction = 0.51992187 * 10240; time = 0.0451s; samplesPerSecond = 226814.6
07/14/2016 17:25:44:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.82934303 * 10240; EvalErrorPrediction = 0.50839844 * 10240; time = 0.0415s; samplesPerSecond = 247038.7
07/14/2016 17:25:44: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.84561005 * 20480; EvalErrorPrediction = 0.51416016 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.090091s
07/14/2016 17:25:44: SGD: Saving checkpoint model '/tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn'
07/14/2016 17:25:44: CNTKCommandTrainEnd: speechTrain

07/14/2016 17:25:44: Action "train" complete.


07/14/2016 17:25:44: ##############################################################################
07/14/2016 17:25:44: #                                                                            #
07/14/2016 17:25:44: # Action "write"                                                             #
07/14/2016 17:25:44: #                                                                            #
07/14/2016 17:25:44: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[512 x 1]] [B1 Gradient[512 x 1]] [B2 Gradient[132 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[512 x 1 x *1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [W0 Gradient[512 x 363]] [W0*features Gradient[512 x *1]] [W0*features+B0 Gradient[512 x 1 x *1]] [W1 Gradient[512 x 512]] [W1*H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2 Gradient[132 x 512]] [W2*H1 Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
0x21b1a28: {[InvStdOfFeatures Value[363]] }
0x25c1378: {[B2 Value[132 x 1]] }
0x261c8b8: {[features Value[363 x *1]] }
0x2789da8: {[W0 Value[512 x 363]] }
0x2793038: {[Prior Value[132]] }
0x2793dd8: {[W1 Value[512 x 512]] }
0x2795be8: {[H2 Value[512 x 1 x *1]] [HLast Value[132 x 1 x *1]] [MVNormalizedFeatures Value[363 x *1]] [W0*features+B0 Value[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
0x2795d48: {[H1 Value[512 x 1 x *1]] [W0*features Value[512 x *1]] [W1*H1+B1 Value[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }
0x27b5bf8: {[labels Value[132 x *1]] }
0x2db2318: {[B0 Value[512 x 1]] }
0x3870268: {[W2 Value[132 x 512]] }
0x38760e8: {[B1 Value[512 x 1]] }
0x48b8798: {[MeanOfFeatures Value[363]] }
0xb942538: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
0xb94a238: {[LogOfPrior Value[132]] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to /tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/Output*
Total Samples Evaluated = 3250

07/14/2016 17:25:44: Action "write" complete.

07/14/2016 17:25:44: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /tmp/cntk-test-20160714172540.697131/Speech/DNN_WriteCommand@release_gpu/Output.ScaledLogLikelihood.diff
