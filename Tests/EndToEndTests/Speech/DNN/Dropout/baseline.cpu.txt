CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
07/14/2016 14:13:29: Redirecting stderr to file /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
07/14/2016 14:13:29: Redirecting stderr to file /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 0: 07/14/2016 14:13:29: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:13:29: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:29: 		Built time: Jul 14 2016 13:57:01
MPI Rank 0: 07/14/2016 14:13:29: 		Last modified date: Thu Jul 14 12:50:48 2016
MPI Rank 0: 07/14/2016 14:13:29: 		Build type: release
MPI Rank 0: 07/14/2016 14:13:29: 		Build target: GPU
MPI Rank 0: 07/14/2016 14:13:29: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 14:13:29: 		Math lib: mkl
MPI Rank 0: 07/14/2016 14:13:29: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 07/14/2016 14:13:29: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 07/14/2016 14:13:29: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 07/14/2016 14:13:29: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 14:13:29: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
MPI Rank 0: 07/14/2016 14:13:29: 		Built by philly on adf92da755f9
MPI Rank 0: 07/14/2016 14:13:29: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 07/14/2016 14:13:29: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:13:30: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:13:30: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:13:30: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:13:30: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:13:30: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:13:30: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Running on localhost at 2016/07/14 14:13:30
MPI Rank 0: 07/14/2016 14:13:30: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 14:13:30: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 14:13:30: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 14:13:30: Commands: speechTrain
MPI Rank 0: 07/14/2016 14:13:30: Precision = "float"
MPI Rank 0: 07/14/2016 14:13:30: Using 12 CPU threads.
MPI Rank 0: 07/14/2016 14:13:30: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 14:13:30: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 14:13:30: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: ##############################################################################
MPI Rank 0: 07/14/2016 14:13:30: #                                                                            #
MPI Rank 0: 07/14/2016 14:13:30: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 14:13:30: #                                                                            #
MPI Rank 0: 07/14/2016 14:13:30: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 946 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Created model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Training criterion node(s):
MPI Rank 0: 07/14/2016 14:13:30: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x2614948: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x265fbd8: {[err Value[1]] }
MPI Rank 0: 0x265fcd8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x26a6578: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x26a6738: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x26a68f8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x26a7408: {[ce Gradient[1]] }
MPI Rank 0: 0x26a75c8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x26b74a8: {[features Value[363 x *]] }
MPI Rank 0: 0x26b8638: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x26b8808: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x26d1158: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x26f8398: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x26f84f8: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 0x26fd748: {[logPrior._ Value[132]] }
MPI Rank 0: 0x270a208: {[logPrior Value[132]] }
MPI Rank 0: 0x270a7b8: {[ce Value[1]] }
MPI Rank 0: 0x270ded8: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x2716138: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x274aa48: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x274b058: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x274b218: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x274b3d8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x274b598: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x276dee8: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x276e598: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x276fc28: {[link Value[1 x 1]] }
MPI Rank 0: 0x2770a48: {[labels Value[132 x *]] }
MPI Rank 0: 0x277c3e8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x277c5a8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x277c768: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x277c928: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x277cae8: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x277cca8: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x277ce68: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x277d028: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x277d1e8: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x277d3a8: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x277d568: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x277f278: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x2780318: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x27803b8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x27851b8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:30: 	featNorm.meanVector = Mean()
MPI Rank 0: 07/14/2016 14:13:30: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 07/14/2016 14:13:30: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:31: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:32: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:32: Starting minibatch loop.
MPI Rank 0: 07/14/2016 14:13:33:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 7.68546219 * 2560; err = 0.93085938 * 2560; time = 1.2584s; samplesPerSecond = 2034.4
MPI Rank 0: 07/14/2016 14:13:34:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 7.80283432 * 2560; err = 0.94882813 * 2560; time = 1.2467s; samplesPerSecond = 2053.4
MPI Rank 0: 07/14/2016 14:13:35:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 6.10415955 * 2560; err = 0.92773438 * 2560; time = 1.2358s; samplesPerSecond = 2071.5
MPI Rank 0: 07/14/2016 14:13:37:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.54972839 * 2560; err = 0.90507812 * 2560; time = 1.2240s; samplesPerSecond = 2091.4
MPI Rank 0: 07/14/2016 14:13:38:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.20863037 * 2560; err = 0.90390625 * 2560; time = 1.2297s; samplesPerSecond = 2081.8
MPI Rank 0: 07/14/2016 14:13:39:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.10626831 * 2560; err = 0.90390625 * 2560; time = 1.2296s; samplesPerSecond = 2082.1
MPI Rank 0: 07/14/2016 14:13:40:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.97180176 * 2560; err = 0.87617188 * 2560; time = 1.1990s; samplesPerSecond = 2135.1
MPI Rank 0: 07/14/2016 14:13:41:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.89713135 * 2560; err = 0.88632813 * 2560; time = 1.2024s; samplesPerSecond = 2129.1
MPI Rank 0: 07/14/2016 14:13:41: Finished Epoch[ 1 of 5]: [Training] ce = 5.29075203 * 20480; err = 0.91035156 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=9.82788s
MPI Rank 0: 07/14/2016 14:13:41: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:41: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:13:42:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.87544616 * 2560; err = 0.87382812 * 2560; time = 0.8657s; samplesPerSecond = 2957.0
MPI Rank 0: 07/14/2016 14:13:43:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.82644703 * 2560; err = 0.87421875 * 2560; time = 0.8793s; samplesPerSecond = 2911.3
MPI Rank 0: 07/14/2016 14:13:44:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.71959045 * 2560; err = 0.84609375 * 2560; time = 0.8695s; samplesPerSecond = 2944.3
MPI Rank 0: 07/14/2016 14:13:45:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.65889782 * 2560; err = 0.84296875 * 2560; time = 0.8755s; samplesPerSecond = 2924.0
MPI Rank 0: 07/14/2016 14:13:46:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.52193016 * 2560; err = 0.81757813 * 2560; time = 0.8957s; samplesPerSecond = 2858.0
MPI Rank 0: 07/14/2016 14:13:47:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.46148409 * 2560; err = 0.79687500 * 2560; time = 0.8751s; samplesPerSecond = 2925.3
MPI Rank 0: 07/14/2016 14:13:48:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.36828462 * 2560; err = 0.78945312 * 2560; time = 0.8573s; samplesPerSecond = 2986.2
MPI Rank 0: 07/14/2016 14:13:48:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.33409458 * 2560; err = 0.79726562 * 2560; time = 0.8651s; samplesPerSecond = 2959.3
MPI Rank 0: 07/14/2016 14:13:48: Finished Epoch[ 2 of 5]: [Training] ce = 3.59577186 * 20480; err = 0.82978516 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=6.98824s
MPI Rank 0: 07/14/2016 14:13:48: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:48: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:48: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:13:49:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.35099206 * 2560; err = 0.79804688 * 2560; time = 0.8529s; samplesPerSecond = 3001.7
MPI Rank 0: 07/14/2016 14:13:50:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.31007403 * 2560; err = 0.79257813 * 2560; time = 0.8479s; samplesPerSecond = 3019.3
MPI Rank 0: 07/14/2016 14:13:51:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.18310478 * 2560; err = 0.78242188 * 2560; time = 0.8389s; samplesPerSecond = 3051.6
MPI Rank 0: 07/14/2016 14:13:52:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.25772761 * 2560; err = 0.79453125 * 2560; time = 0.8622s; samplesPerSecond = 2969.3
MPI Rank 0: 07/14/2016 14:13:53:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.18239934 * 2560; err = 0.76132813 * 2560; time = 0.8449s; samplesPerSecond = 3030.1
MPI Rank 0: 07/14/2016 14:13:54:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.09606681 * 2560; err = 0.75156250 * 2560; time = 0.8455s; samplesPerSecond = 3027.8
MPI Rank 0: 07/14/2016 14:13:54:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.01842864 * 2560; err = 0.72070312 * 2560; time = 0.8443s; samplesPerSecond = 3032.2
MPI Rank 0: 07/14/2016 14:13:55:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.00587845 * 2560; err = 0.73828125 * 2560; time = 0.8529s; samplesPerSecond = 3001.6
MPI Rank 0: 07/14/2016 14:13:55: Finished Epoch[ 3 of 5]: [Training] ce = 3.17558396 * 20480; err = 0.76743164 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=6.79458s
MPI Rank 0: 07/14/2016 14:13:55: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:55: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:13:55: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:13:56:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96184726 * 2560; err = 0.72187500 * 2560; time = 0.8266s; samplesPerSecond = 3097.1
MPI Rank 0: 07/14/2016 14:13:57:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.85516431 * 2560; err = 0.71640625 * 2560; time = 0.8259s; samplesPerSecond = 3099.6
MPI Rank 0: 07/14/2016 14:13:58:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87281477 * 2560; err = 0.69609375 * 2560; time = 0.8432s; samplesPerSecond = 3036.1
MPI Rank 0: 07/14/2016 14:13:59:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.80587547 * 2560; err = 0.69140625 * 2560; time = 0.8404s; samplesPerSecond = 3046.1
MPI Rank 0: 07/14/2016 14:14:00:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.79321032 * 2560; err = 0.69023437 * 2560; time = 0.8438s; samplesPerSecond = 3033.7
MPI Rank 0: 07/14/2016 14:14:00:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.76601828 * 2560; err = 0.68984375 * 2560; time = 0.7894s; samplesPerSecond = 3243.0
MPI Rank 0: 07/14/2016 14:14:01:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70998186 * 2560; err = 0.69218750 * 2560; time = 0.8154s; samplesPerSecond = 3139.6
MPI Rank 0: 07/14/2016 14:14:02:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.70870441 * 2560; err = 0.68671875 * 2560; time = 0.8300s; samplesPerSecond = 3084.3
MPI Rank 0: 07/14/2016 14:14:02: Finished Epoch[ 4 of 5]: [Training] ce = 2.80920208 * 20480; err = 0.69809570 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.61914s
MPI Rank 0: 07/14/2016 14:14:02: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:02: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:02: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:14:03:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61388113 * 2560; err = 0.67343750 * 2560; time = 0.8090s; samplesPerSecond = 3164.5
MPI Rank 0: 07/14/2016 14:14:04:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58192264 * 2560; err = 0.66601562 * 2560; time = 0.8370s; samplesPerSecond = 3058.5
MPI Rank 0: 07/14/2016 14:14:04:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.44518922 * 2560; err = 0.63125000 * 2560; time = 0.7918s; samplesPerSecond = 3233.3
MPI Rank 0: 07/14/2016 14:14:05:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.37733449 * 2560; err = 0.61484375 * 2560; time = 0.7616s; samplesPerSecond = 3361.3
MPI Rank 0: 07/14/2016 14:14:06:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.39040028 * 2560; err = 0.62539062 * 2560; time = 0.7894s; samplesPerSecond = 3243.0
MPI Rank 0: 07/14/2016 14:14:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36685897 * 2560; err = 0.60234375 * 2560; time = 0.8154s; samplesPerSecond = 3139.6
MPI Rank 0: 07/14/2016 14:14:08:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.33542351 * 2560; err = 0.61289063 * 2560; time = 0.7815s; samplesPerSecond = 3275.9
MPI Rank 0: 07/14/2016 14:14:08:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.31528734 * 2560; err = 0.61054688 * 2560; time = 0.8029s; samplesPerSecond = 3188.4
MPI Rank 0: 07/14/2016 14:14:08: Finished Epoch[ 5 of 5]: [Training] ce = 2.42828720 * 20480; err = 0.62958984 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.39335s
MPI Rank 0: 07/14/2016 14:14:08: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 14:14:08: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:08: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:08: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 14:13:29: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:13:29: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:29: 		Built time: Jul 14 2016 13:57:01
MPI Rank 1: 07/14/2016 14:13:29: 		Last modified date: Thu Jul 14 12:50:48 2016
MPI Rank 1: 07/14/2016 14:13:29: 		Build type: release
MPI Rank 1: 07/14/2016 14:13:29: 		Build target: GPU
MPI Rank 1: 07/14/2016 14:13:29: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 14:13:29: 		Math lib: mkl
MPI Rank 1: 07/14/2016 14:13:29: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 07/14/2016 14:13:29: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 07/14/2016 14:13:29: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 07/14/2016 14:13:29: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 14:13:29: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
MPI Rank 1: 07/14/2016 14:13:29: 		Built by philly on adf92da755f9
MPI Rank 1: 07/14/2016 14:13:29: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 07/14/2016 14:13:29: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:13:30: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:13:30: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:13:30: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:13:30: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:13:30: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:13:30: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Running on localhost at 2016/07/14 14:13:30
MPI Rank 1: 07/14/2016 14:13:30: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 14:13:30: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 14:13:30: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 14:13:30: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 14:13:30: Commands: speechTrain
MPI Rank 1: 07/14/2016 14:13:30: Precision = "float"
MPI Rank 1: 07/14/2016 14:13:30: Using 12 CPU threads.
MPI Rank 1: 07/14/2016 14:13:30: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 14:13:30: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 14:13:30: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: ##############################################################################
MPI Rank 1: 07/14/2016 14:13:30: #                                                                            #
MPI Rank 1: 07/14/2016 14:13:30: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 14:13:30: #                                                                            #
MPI Rank 1: 07/14/2016 14:13:30: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 946 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Created model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Training criterion node(s):
MPI Rank 1: 07/14/2016 14:13:30: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x1f120b8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2093168: {[link Value[1 x 1]] }
MPI Rank 1: 0x20932f8: {[ce Value[1]] }
MPI Rank 1: 0x2093828: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x20b0958: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x20b0f58: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x20ed808: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x20ede08: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x20ee4e8: {[features Value[363 x *]] }
MPI Rank 1: 0x20f97a8: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x20f9908: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x20f9ed8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x20fa098: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x20fa258: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x20fa418: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x20fa5d8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x20fa798: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x20fa958: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x20fe3f8: {[ce Gradient[1]] }
MPI Rank 1: 0x20fe5b8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x20fe778: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x20fe938: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x2101288: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2101448: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2101608: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x21017c8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2101988: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2101b48: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2101d08: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2101ec8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x2102088: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x2102248: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x2102408: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x210afb8: {[logPrior._ Value[132]] }
MPI Rank 1: 0x2123378: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x2134ea8: {[labels Value[132 x *]] }
MPI Rank 1: 0x2187978: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x219a2b8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x219a3b8: {[logPrior Value[132]] }
MPI Rank 1: 0x219a768: {[err Value[1]] }
MPI Rank 1: 0x21a7368: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x21a7808: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2a18208: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:30: 	featNorm.meanVector = Mean()
MPI Rank 1: 07/14/2016 14:13:30: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 07/14/2016 14:13:30: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252508] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:32: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:32: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:32: Starting minibatch loop.
MPI Rank 1: 07/14/2016 14:13:33:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 7.68546219 * 2560; err = 0.93085938 * 2560; time = 1.2833s; samplesPerSecond = 1994.9
MPI Rank 1: 07/14/2016 14:13:34:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 7.80283432 * 2560; err = 0.94882813 * 2560; time = 1.2333s; samplesPerSecond = 2075.7
MPI Rank 1: 07/14/2016 14:13:35:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 6.10415955 * 2560; err = 0.92773438 * 2560; time = 1.2231s; samplesPerSecond = 2093.0
MPI Rank 1: 07/14/2016 14:13:37:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.54972839 * 2560; err = 0.90507812 * 2560; time = 1.2305s; samplesPerSecond = 2080.5
MPI Rank 1: 07/14/2016 14:13:38:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.20863037 * 2560; err = 0.90390625 * 2560; time = 1.2011s; samplesPerSecond = 2131.4
MPI Rank 1: 07/14/2016 14:13:39:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.10626831 * 2560; err = 0.90390625 * 2560; time = 1.2041s; samplesPerSecond = 2126.0
MPI Rank 1: 07/14/2016 14:13:40:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.97180176 * 2560; err = 0.87617188 * 2560; time = 1.1956s; samplesPerSecond = 2141.1
MPI Rank 1: 07/14/2016 14:13:41:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.89713135 * 2560; err = 0.88632813 * 2560; time = 1.2251s; samplesPerSecond = 2089.6
MPI Rank 1: 07/14/2016 14:13:41: Finished Epoch[ 1 of 5]: [Training] ce = 5.29075203 * 20480; err = 0.91035156 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=9.79818s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:41: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:13:42:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.87544616 * 2560; err = 0.87382812 * 2560; time = 0.8661s; samplesPerSecond = 2955.7
MPI Rank 1: 07/14/2016 14:13:43:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.82644703 * 2560; err = 0.87421875 * 2560; time = 0.8791s; samplesPerSecond = 2912.1
MPI Rank 1: 07/14/2016 14:13:44:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.71959045 * 2560; err = 0.84609375 * 2560; time = 0.8695s; samplesPerSecond = 2944.1
MPI Rank 1: 07/14/2016 14:13:45:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.65889782 * 2560; err = 0.84296875 * 2560; time = 0.8754s; samplesPerSecond = 2924.2
MPI Rank 1: 07/14/2016 14:13:46:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.52193016 * 2560; err = 0.81757813 * 2560; time = 0.8960s; samplesPerSecond = 2857.2
MPI Rank 1: 07/14/2016 14:13:47:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.46148409 * 2560; err = 0.79687500 * 2560; time = 0.8745s; samplesPerSecond = 2927.3
MPI Rank 1: 07/14/2016 14:13:48:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.36828462 * 2560; err = 0.78945312 * 2560; time = 0.8576s; samplesPerSecond = 2985.0
MPI Rank 1: 07/14/2016 14:13:48:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.33409458 * 2560; err = 0.79726562 * 2560; time = 0.8652s; samplesPerSecond = 2958.8
MPI Rank 1: 07/14/2016 14:13:48: Finished Epoch[ 2 of 5]: [Training] ce = 3.59577186 * 20480; err = 0.82978516 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=6.98822s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:48: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:48: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:13:49:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.35099206 * 2560; err = 0.79804688 * 2560; time = 0.8531s; samplesPerSecond = 3000.9
MPI Rank 1: 07/14/2016 14:13:50:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.31007403 * 2560; err = 0.79257813 * 2560; time = 0.8477s; samplesPerSecond = 3020.1
MPI Rank 1: 07/14/2016 14:13:51:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.18310478 * 2560; err = 0.78242188 * 2560; time = 0.8388s; samplesPerSecond = 3051.8
MPI Rank 1: 07/14/2016 14:13:52:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.25772761 * 2560; err = 0.79453125 * 2560; time = 0.8623s; samplesPerSecond = 2968.9
MPI Rank 1: 07/14/2016 14:13:53:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.18239934 * 2560; err = 0.76132813 * 2560; time = 0.8452s; samplesPerSecond = 3029.0
MPI Rank 1: 07/14/2016 14:13:54:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.09606681 * 2560; err = 0.75156250 * 2560; time = 0.8451s; samplesPerSecond = 3029.1
MPI Rank 1: 07/14/2016 14:13:54:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.01842864 * 2560; err = 0.72070312 * 2560; time = 0.8444s; samplesPerSecond = 3031.6
MPI Rank 1: 07/14/2016 14:13:55:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.00587845 * 2560; err = 0.73828125 * 2560; time = 0.8531s; samplesPerSecond = 3001.0
MPI Rank 1: 07/14/2016 14:13:55: Finished Epoch[ 3 of 5]: [Training] ce = 3.17558396 * 20480; err = 0.76743164 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=6.79456s
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:55: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:13:55: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:13:56:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96184726 * 2560; err = 0.72187500 * 2560; time = 0.8265s; samplesPerSecond = 3097.3
MPI Rank 1: 07/14/2016 14:13:57:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.85516431 * 2560; err = 0.71640625 * 2560; time = 0.8261s; samplesPerSecond = 3099.1
MPI Rank 1: 07/14/2016 14:13:58:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87281477 * 2560; err = 0.69609375 * 2560; time = 0.8425s; samplesPerSecond = 3038.6
MPI Rank 1: 07/14/2016 14:13:59:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.80587547 * 2560; err = 0.69140625 * 2560; time = 0.8410s; samplesPerSecond = 3044.2
MPI Rank 1: 07/14/2016 14:14:00:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.79321032 * 2560; err = 0.69023437 * 2560; time = 0.8437s; samplesPerSecond = 3034.1
MPI Rank 1: 07/14/2016 14:14:00:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.76601828 * 2560; err = 0.68984375 * 2560; time = 0.7890s; samplesPerSecond = 3244.5
MPI Rank 1: 07/14/2016 14:14:01:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70998186 * 2560; err = 0.69218750 * 2560; time = 0.8157s; samplesPerSecond = 3138.5
MPI Rank 1: 07/14/2016 14:14:02:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.70870441 * 2560; err = 0.68671875 * 2560; time = 0.8299s; samplesPerSecond = 3084.9
MPI Rank 1: 07/14/2016 14:14:02: Finished Epoch[ 4 of 5]: [Training] ce = 2.80920208 * 20480; err = 0.69809570 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.61913s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:02: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:02: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:14:03:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61388113 * 2560; err = 0.67343750 * 2560; time = 0.8090s; samplesPerSecond = 3164.4
MPI Rank 1: 07/14/2016 14:14:04:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58192264 * 2560; err = 0.66601562 * 2560; time = 0.8370s; samplesPerSecond = 3058.4
MPI Rank 1: 07/14/2016 14:14:04:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.44518922 * 2560; err = 0.63125000 * 2560; time = 0.7917s; samplesPerSecond = 3233.7
MPI Rank 1: 07/14/2016 14:14:05:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.37733449 * 2560; err = 0.61484375 * 2560; time = 0.7616s; samplesPerSecond = 3361.3
MPI Rank 1: 07/14/2016 14:14:06:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.39040028 * 2560; err = 0.62539062 * 2560; time = 0.7895s; samplesPerSecond = 3242.4
MPI Rank 1: 07/14/2016 14:14:07:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36685897 * 2560; err = 0.60234375 * 2560; time = 0.8155s; samplesPerSecond = 3139.1
MPI Rank 1: 07/14/2016 14:14:08:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.33542351 * 2560; err = 0.61289063 * 2560; time = 0.7815s; samplesPerSecond = 3275.8
MPI Rank 1: 07/14/2016 14:14:08:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.31528734 * 2560; err = 0.61054688 * 2560; time = 0.8029s; samplesPerSecond = 3188.5
MPI Rank 1: 07/14/2016 14:14:08: Finished Epoch[ 5 of 5]: [Training] ce = 2.42828720 * 20480; err = 0.62958984 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.39335s
MPI Rank 1: 07/14/2016 14:14:08: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:08: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:08: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jul 14 2016 13:57:01
		Last modified date: Thu Jul 14 12:50:48 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
		Built by philly on adf92da755f9
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
07/14/2016 14:14:09: Redirecting stderr to file /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
07/14/2016 14:14:09: Redirecting stderr to file /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 0: 07/14/2016 14:14:09: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:14:09: Build info: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:09: 		Built time: Jul 14 2016 13:57:01
MPI Rank 0: 07/14/2016 14:14:09: 		Last modified date: Thu Jul 14 12:50:48 2016
MPI Rank 0: 07/14/2016 14:14:09: 		Build type: release
MPI Rank 0: 07/14/2016 14:14:09: 		Build target: GPU
MPI Rank 0: 07/14/2016 14:14:09: 		With 1bit-SGD: no
MPI Rank 0: 07/14/2016 14:14:09: 		Math lib: mkl
MPI Rank 0: 07/14/2016 14:14:09: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 07/14/2016 14:14:09: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 07/14/2016 14:14:09: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 07/14/2016 14:14:09: 		Build Branch: HEAD
MPI Rank 0: 07/14/2016 14:14:09: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
MPI Rank 0: 07/14/2016 14:14:09: 		Built by philly on adf92da755f9
MPI Rank 0: 07/14/2016 14:14:09: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 07/14/2016 14:14:09: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:14:10: -------------------------------------------------------------------
MPI Rank 0: 07/14/2016 14:14:10: GPU info:
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:14:10: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:14:10: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:14:10: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 07/14/2016 14:14:10: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Running on localhost at 2016/07/14 14:14:10
MPI Rank 0: 07/14/2016 14:14:10: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 14:14:10: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 07/14/2016 14:14:10: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 07/14/2016 14:14:10: Commands: speechTrain
MPI Rank 0: 07/14/2016 14:14:10: Precision = "float"
MPI Rank 0: 07/14/2016 14:14:10: Using 12 CPU threads.
MPI Rank 0: 07/14/2016 14:14:10: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 07/14/2016 14:14:10: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 07/14/2016 14:14:10: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: ##############################################################################
MPI Rank 0: 07/14/2016 14:14:10: #                                                                            #
MPI Rank 0: 07/14/2016 14:14:10: # Action "train"                                                             #
MPI Rank 0: 07/14/2016 14:14:10: #                                                                            #
MPI Rank 0: 07/14/2016 14:14:10: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 946 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Loaded model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Training criterion node(s):
MPI Rank 0: 07/14/2016 14:14:10: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36c08c18: {[link Value[1 x 1]] }
MPI Rank 0: 0x7f1f36c63ad8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c63c98: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c63e58: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c64018: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c641d8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c64398: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c64558: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36c64658: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36c92de8: {[ce Gradient[1]] }
MPI Rank 0: 0x7f1f36c92fa8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36c95dd8: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 0x7f1f36c972c8: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x7f1f36c9a5e8: {[err Value[1]] }
MPI Rank 0: 0x7f1f36c9e8e8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7f1f36ca1208: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x7f1f36cab888: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x7f1f36caba48: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cabc08: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x7f1f36cabdc8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb81e8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x7f1f36cb8408: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb85c8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb8788: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb8948: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb8b08: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x7f1f36cb8cc8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb8e88: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36cb9048: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36cbd9b8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7f1f36cc00e8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7f1f36cc0858: {[logPrior._ Value[132]] }
MPI Rank 0: 0x7f1f36cc1008: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x7f1f36cc1168: {[ce Value[1]] }
MPI Rank 0: 0x7f1f36cc13e8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x7f1f36cc1a68: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x7f1f36ccbf28: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x7f1f36ccc128: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x7f1f36ccc1c8: {[features Value[363 x *]] }
MPI Rank 0: 0x7f1f36ced478: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x7f1f36ced9f8: {[logPrior Value[132]] }
MPI Rank 0: 0x7f1f496f3028: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x7f1f496f8dc8: {[labels Value[132 x *]] }
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:10: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:14:11:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96184726 * 2560; err = 0.72187500 * 2560; time = 0.8421s; samplesPerSecond = 3040.0
MPI Rank 0: 07/14/2016 14:14:12:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.85516431 * 2560; err = 0.71640625 * 2560; time = 0.8484s; samplesPerSecond = 3017.3
MPI Rank 0: 07/14/2016 14:14:13:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87281477 * 2560; err = 0.69609375 * 2560; time = 0.8476s; samplesPerSecond = 3020.2
MPI Rank 0: 07/14/2016 14:14:14:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.80587547 * 2560; err = 0.69140625 * 2560; time = 0.8365s; samplesPerSecond = 3060.4
MPI Rank 0: 07/14/2016 14:14:15:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.79321032 * 2560; err = 0.69023437 * 2560; time = 0.8358s; samplesPerSecond = 3063.1
MPI Rank 0: 07/14/2016 14:14:15:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.76601828 * 2560; err = 0.68984375 * 2560; time = 0.8062s; samplesPerSecond = 3175.5
MPI Rank 0: 07/14/2016 14:14:16:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70998186 * 2560; err = 0.69218750 * 2560; time = 0.8423s; samplesPerSecond = 3039.3
MPI Rank 0: 07/14/2016 14:14:17:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.70870441 * 2560; err = 0.68671875 * 2560; time = 0.8579s; samplesPerSecond = 2984.2
MPI Rank 0: 07/14/2016 14:14:17: Finished Epoch[ 4 of 5]: [Training] ce = 2.80920208 * 20480; err = 0.69809570 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.79368s
MPI Rank 0: 07/14/2016 14:14:17: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:17: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:17: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 07/14/2016 14:14:18:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61388113 * 2560; err = 0.67343750 * 2560; time = 0.7834s; samplesPerSecond = 3267.8
MPI Rank 0: 07/14/2016 14:14:19:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58192264 * 2560; err = 0.66601562 * 2560; time = 0.8235s; samplesPerSecond = 3108.8
MPI Rank 0: 07/14/2016 14:14:20:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.44518922 * 2560; err = 0.63125000 * 2560; time = 0.7996s; samplesPerSecond = 3201.8
MPI Rank 0: 07/14/2016 14:14:20:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.37733449 * 2560; err = 0.61484375 * 2560; time = 0.7498s; samplesPerSecond = 3414.3
MPI Rank 0: 07/14/2016 14:14:21:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.39040028 * 2560; err = 0.62539062 * 2560; time = 0.7983s; samplesPerSecond = 3206.7
MPI Rank 0: 07/14/2016 14:14:22:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36685897 * 2560; err = 0.60234375 * 2560; time = 0.8390s; samplesPerSecond = 3051.3
MPI Rank 0: 07/14/2016 14:14:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.33542351 * 2560; err = 0.61289063 * 2560; time = 0.8257s; samplesPerSecond = 3100.3
MPI Rank 0: 07/14/2016 14:14:24:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.31528734 * 2560; err = 0.61054688 * 2560; time = 0.8178s; samplesPerSecond = 3130.4
MPI Rank 0: 07/14/2016 14:14:24: Finished Epoch[ 5 of 5]: [Training] ce = 2.42828720 * 20480; err = 0.62958984 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.44185s
MPI Rank 0: 07/14/2016 14:14:24: SGD: Saving checkpoint model '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 07/14/2016 14:14:24: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:24: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 07/14/2016 14:14:24: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 07/14/2016 14:14:09: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:14:09: Build info: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:09: 		Built time: Jul 14 2016 13:57:01
MPI Rank 1: 07/14/2016 14:14:09: 		Last modified date: Thu Jul 14 12:50:48 2016
MPI Rank 1: 07/14/2016 14:14:09: 		Build type: release
MPI Rank 1: 07/14/2016 14:14:09: 		Build target: GPU
MPI Rank 1: 07/14/2016 14:14:09: 		With 1bit-SGD: no
MPI Rank 1: 07/14/2016 14:14:09: 		Math lib: mkl
MPI Rank 1: 07/14/2016 14:14:09: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 07/14/2016 14:14:09: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 07/14/2016 14:14:09: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 07/14/2016 14:14:09: 		Build Branch: HEAD
MPI Rank 1: 07/14/2016 14:14:09: 		Build SHA1: b918e06de12613a1773a0976ab94e213bd09ce52
MPI Rank 1: 07/14/2016 14:14:09: 		Built by philly on adf92da755f9
MPI Rank 1: 07/14/2016 14:14:09: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 07/14/2016 14:14:09: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:14:10: -------------------------------------------------------------------
MPI Rank 1: 07/14/2016 14:14:10: GPU info:
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:14:10: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:14:10: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:14:10: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 07/14/2016 14:14:10: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Running on localhost at 2016/07/14 14:14:10
MPI Rank 1: 07/14/2016 14:14:10: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 14:14:10: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 07/14/2016 14:14:10: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 07/14/2016 14:14:10: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 07/14/2016 14:14:10: Commands: speechTrain
MPI Rank 1: 07/14/2016 14:14:10: Precision = "float"
MPI Rank 1: 07/14/2016 14:14:10: Using 12 CPU threads.
MPI Rank 1: 07/14/2016 14:14:10: CNTKModelPath: /tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 07/14/2016 14:14:10: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 07/14/2016 14:14:10: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: ##############################################################################
MPI Rank 1: 07/14/2016 14:14:10: #                                                                            #
MPI Rank 1: 07/14/2016 14:14:10: # Action "train"                                                             #
MPI Rank 1: 07/14/2016 14:14:10: #                                                                            #
MPI Rank 1: 07/14/2016 14:14:10: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 946 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252508 frames in 946 out of 946 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 946 utterances grouped into 3 chunks, av. chunk size: 315.3 utterances, 84169.3 frames
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160714141322.924935/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Loaded model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Training criterion node(s):
MPI Rank 1: 07/14/2016 14:14:10: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x2f6f448: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x2f83a88: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x2f92a08: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2f92bc8: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2f92d88: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x2f92f48: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2f93108: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2f932c8: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2f93488: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2fb01b8: {[err Value[1]] }
MPI Rank 1: 0x2fb02b8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x2fb0478: {[ce Value[1]] }
MPI Rank 1: 0x2fb0638: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x2fb0da8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x2fbfb78: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2fc7148: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x2fc7498: {[logPrior._ Value[132]] }
MPI Rank 1: 0x2fdce08: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x2fddc88: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x2fde308: {[logPrior Value[132]] }
MPI Rank 1: 0x2fe2828: {[ce Gradient[1]] }
MPI Rank 1: 0x2fe29e8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x2fe2ba8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x2fe2d68: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x2fe4f58: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x2fe5118: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2fe52d8: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x2fe5498: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x2fe5658: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2fe5818: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x2fe59d8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x2fe5b98: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x2febff8: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x2ff0b38: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x2ff0cf8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x2ff0eb8: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x2ff1078: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x2ff3118: {[labels Value[132 x *]] }
MPI Rank 1: 0x2ff4b08: {[link Value[1 x 1]] }
MPI Rank 1: 0x3147b88: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x3148608: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x318de78: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x3197128: {[features Value[363 x *]] }
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:10: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:14:11:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96184726 * 2560; err = 0.72187500 * 2560; time = 0.8604s; samplesPerSecond = 2975.5
MPI Rank 1: 07/14/2016 14:14:12:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.85516431 * 2560; err = 0.71640625 * 2560; time = 0.8484s; samplesPerSecond = 3017.4
MPI Rank 1: 07/14/2016 14:14:13:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87281477 * 2560; err = 0.69609375 * 2560; time = 0.8474s; samplesPerSecond = 3020.9
MPI Rank 1: 07/14/2016 14:14:14:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.80587547 * 2560; err = 0.69140625 * 2560; time = 0.8367s; samplesPerSecond = 3059.6
MPI Rank 1: 07/14/2016 14:14:15:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.79321032 * 2560; err = 0.69023437 * 2560; time = 0.8356s; samplesPerSecond = 3063.5
MPI Rank 1: 07/14/2016 14:14:15:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.76601828 * 2560; err = 0.68984375 * 2560; time = 0.8059s; samplesPerSecond = 3176.6
MPI Rank 1: 07/14/2016 14:14:16:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.70998186 * 2560; err = 0.69218750 * 2560; time = 0.8423s; samplesPerSecond = 3039.2
MPI Rank 1: 07/14/2016 14:14:17:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.70870441 * 2560; err = 0.68671875 * 2560; time = 0.8584s; samplesPerSecond = 2982.2
MPI Rank 1: 07/14/2016 14:14:17: Finished Epoch[ 4 of 5]: [Training] ce = 2.80920208 * 20480; err = 0.69809570 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.79359s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:17: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:17: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 07/14/2016 14:14:18:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61388113 * 2560; err = 0.67343750 * 2560; time = 0.7836s; samplesPerSecond = 3267.1
MPI Rank 1: 07/14/2016 14:14:19:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58192264 * 2560; err = 0.66601562 * 2560; time = 0.8236s; samplesPerSecond = 3108.4
MPI Rank 1: 07/14/2016 14:14:20:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.44518922 * 2560; err = 0.63125000 * 2560; time = 0.7994s; samplesPerSecond = 3202.3
MPI Rank 1: 07/14/2016 14:14:20:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.37733449 * 2560; err = 0.61484375 * 2560; time = 0.7495s; samplesPerSecond = 3415.4
MPI Rank 1: 07/14/2016 14:14:21:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.39040028 * 2560; err = 0.62539062 * 2560; time = 0.7985s; samplesPerSecond = 3205.9
MPI Rank 1: 07/14/2016 14:14:22:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36685897 * 2560; err = 0.60234375 * 2560; time = 0.8391s; samplesPerSecond = 3051.0
MPI Rank 1: 07/14/2016 14:14:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.33542351 * 2560; err = 0.61289063 * 2560; time = 0.8257s; samplesPerSecond = 3100.6
MPI Rank 1: 07/14/2016 14:14:24:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.31528734 * 2560; err = 0.61054688 * 2560; time = 0.8178s; samplesPerSecond = 3130.3
MPI Rank 1: 07/14/2016 14:14:24: Finished Epoch[ 5 of 5]: [Training] ce = 2.42828720 * 20480; err = 0.62958984 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.44184s
MPI Rank 1: 07/14/2016 14:14:24: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:24: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 07/14/2016 14:14:24: __COMPLETED__
MPI Rank 1: ~MPIWrapper